
;
;	LINE_DATA
;	byte-size,...
;
;	LINE_DATA2 (TAB expand)
;	display-len,...
;

;
;
;
CUT_LINE:
	CALL	GETCHR2
	PUSH	HL
	LD	A,(LINE_DATA)
	SUB	E
	PUSH	AF
	LD	A,E
	LD	(LINE_DATA),A
	CALL	SETLINE2
	POP	AF
	POP	HL
	LD	DE,LINE_DATA
	LD	(DE),A
	INC	DE
	LD	B,A
	INC	B
CUT_LINE.1:
	DEC	B
	JR	Z,CUT_LINE.2
	LD	A,(HL)
	LD	(DE),A
	INC	HL
	INC	DE
	JR	CUT_LINE.1
CUT_LINE.2:
	XOR	A
	LD	(DE),A
	RET
;
;
;
JOINS:
	LD	HL,(LINE)
	PUSH	HL

	LD	A,(WIDTH)	;80
	CALL	CUT_LINE
	LD	HL,(LINE)
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	CALL	MAKE_LINE
	CALL	CUTS

	POP	HL
	LD	(LINE),HL
	RET
;
;
;
CUT:
	PUSH	HL
;	LD	HL,LINE_DATA
	CALL	COUNT1
	LD	C,A	;C = DATA's len

	PUSH	HL	;IX = DATA's end
	POP	IX

	POP	HL

	PUSH	HL
	PUSH	BC

	CALL	COUNT_L

	POP	BC
	POP	HL

	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	LD	A,0
	JR	C,$+3
	DEC	A
	LD	(CNT),A

	LD	B,(HL)
	INC	HL
	INC	B
	LD	E,0	;byte

CUT.1:	LD	A,C
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	JR	Z,CUT.5
	DEC	B
	JR	Z,CUT.5
	LD	A,(HL)
	LD	(IX+0),A
	INC	HL
	INC	IX
	INC	C
	INC	E
	CP	09H
	JR	NZ,CUT.1

	DEC	C
CUT.2:	INC	C
	LD	A,C
@04:	AND	07H
	JR	NZ,CUT.2
	JR	CUT.1
CUT.5:
	LD	(IX+0),00H
	LD	A,(LINE_DATA)
	ADD	A,E
	LD	(LINE_DATA),A

	PUSH	DE
	PUSH	BC
	CALL	SETLINE2
	POP	BC
	POP	DE

	LD	A,B
	OR	A
	RET	NZ
	SCF
	RET
;
;
;
CUTS:
	LD	HL,(LINE)
	PUSH	HL
	INC	HL
	CALL	GET_ADR2
;	LD	E,0
CUTS5:
	CALL	CUT
	JP	C,CUTS50

	PUSH	DE

	LD	HL,(LINE)
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL

	POP	DE

	LD	IX,LINE_DATA
	LD	A,(HL)
	SUB	E
	LD	B,A
	LD	(IX+0),A
	INC	HL
	INC	IX

	INC	E
CUTS10:	DEC	E
	JR	Z,CUTS11
	INC	HL
	JR	CUTS10
CUTS11:
	INC	B
CUTS12:	DEC	B
	JR	Z,CUTS15
	LD	A,(HL)
	LD	(IX+0),A
	INC	HL
	INC	IX
	JR	CUTS12
CUTS15:
	XOR	A
	LD	(IX+0),A

	LD	A,(CNT)
	OR	A
	JR	Z,CUTS20

	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	JP	CUTS5
CUTS20:
	CALL	SETLINE2
	JR	CUTS90
CUTS50:
	LD	HL,(LINE)
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	CALL	DEL_LINE
CUTS90:
	POP	HL
	LD	(LINE),HL
	RET
;
;
;
SETLINE:
	LD	A,(EDIT)
	OR	A
	RET	Z

	CALL	CONV2	; => LINE_DATA
SETLINE2:
	LD	HL,(LINE_PNT)
	LD	A,(LINE_DATA)
	LD	C,A
	LD	A,(HL)
	CP	C	;cp (line_data)
	JR	Z,SETLINE20

	LD	A,(LINE_DATA)
	LD	B,0
	LD	C,A
	LD	HL,(LINE_PNT)
	INC	HL
	INC	HL
	ADD	HL,BC
	EX	DE,HL

	PUSH	DE	;get address to next line
	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	POP	DE
	PUSH	DE

	PUSH	HL
	LD	B,H	;BC = (END_TEXT)-HL
	LD	C,L
	LD	HL,(END_TEXT)
	OR	A
	SBC	HL,BC
	LD	B,H
	LD	C,L

	EX	DE,HL	;(END_TEXT) = DE + BC
	ADD	HL,BC
	LD	(END_TEXT),HL

	POP	HL
	POP	DE
	CALL	COPY

SETLINE20:
	LD	A,(LINE_DATA)
	LD	B,0
	LD	C,A
	INC	BC
	LD	HL,LINE_DATA
	LD	DE,(LINE_PNT)
	LDIR
	LD	(DE),A
	XOR	A
	LD	(EDIT),A


CHECK_MEM:

;if (TEXT_MAX)-100H < (END_TEXT)

	PUSH	HL
	PUSH	DE
	PUSH	AF

	LD	HL,(TEXT_MAX)
	OR	A
	LD	DE,100H
	SBC	HL,DE
	LD	DE,(END_TEXT)
	OR	A
	SBC	HL,DE
	LD	A,00H
	JR	NC,$+3
	DEC	A
	LD	(KEY_FLG),A

	POP	AF
	POP	DE
	POP	HL
	RET
;
;	Convert LINE_DATA to LINE_DATA2
;	09H expand
;	(LINE_DATA2) .. len
;
CONV1:
	LD	HL,LINE_DATA+1
	LD	DE,LINE_DATA2+1
	LD	B,0
	LD	C,0
CONV1.1:
	LD	A,(HL)
	INC	HL
	OR	A
	JP	Z,CONV1.5
	LD	(DE),A
	CP	09H
	JR	Z,CONV1.2
	INC	DE
	INC	C
	JR	CONV1.1
CONV1.2:
	LD	A,09H
	LD	(DE),A
	INC	DE
	INC	C
	LD	A,C
@05:	AND	07H
	JR	NZ,CONV1.2
	JR	CONV1.1
CONV1.5:
	XOR	A
	LD	(DE),A
	LD	A,C
	LD	(LINE_DATA2),A
	RET
;
;	Convert LINE_DATA2 to LINE_DATA
;	09H pack
;	(LINE_DATA) .. byte
;
CONV2:
	LD	HL,LINE_DATA2+1
	LD	DE,LINE_DATA+1
	LD	C,0	;x
	LD	B,0
CONV2.2:
	LD	A,(HL)
	OR	A
	JR	Z,CONV2.7
	LD	(DE),A
	INC	DE
	INC	B
	CP	09H
	JR	Z,CONV2.3
	INC	HL
	INC	C
	JR	CONV2.2
CONV2.3:
	INC	HL
	INC	C
	LD	A,C
@06:	AND	07H
	JR	NZ,CONV2.3
	JR	CONV2.2
CONV2.7:
	XOR	A
	LD	(DE),A
	LD	A,B
	LD	(LINE_DATA),A
	RET
;
;
;
;COUNT_T:
;	LD	C,0
;COUNT_T.1:
;	CALL	COUNT_L
;
;	LD	A,C
;	ADD	A,E
;	LD	C,A
;
;	LD	A,E
;	CP	80
;	RET	C
;
;	INC	HL
;	JR	COUNT_T.1
;
;
;

COUNT_L:
	LD	E,0
	LD	B,(HL)
	INC	HL
	INC	B
COUNT_L.1:
	DEC	B
	JR	Z,COUNT_L.5
	LD	A,(HL)
	INC	HL
	INC	E
	CP	09H
	JR	NZ,COUNT_L.1
	DEC	E
COUNT_L.2:
	INC	E
	LD	A,E
@07:	AND	07H
	JR	NZ,COUNT_L.2
	JR	COUNT_L.1
COUNT_L.5:
	LD	A,E
	RET
;
;
;
COUNT1:
	LD	HL,LINE_DATA
COUNT:
	LD	B,(HL)
	INC	HL
	LD	C,0
	INC	B
COUNT.1:
	DEC	B
	JR	Z,COUNT.5
	LD	A,(HL)
	INC	HL
	INC	C
	CP	09H
	JR	NZ,COUNT.1
	DEC	C
COUNT.2:
	INC	C
	LD	A,C
@08:	AND	07H
	JR	NZ,COUNT.2
	JR	COUNT.1
COUNT.5:
	LD	A,C
	RET
;
;	Get char from LINE_DATA2
;
GETCHR:
	LD	HL,LINE_DATA2+1
	LD	B,0
	LD	C,A
	ADD	HL,BC
	LD	A,(HL)
	RET
;
;	Get char from LINE_DATA
;
GETCHR2:
	LD	HL,LINE_DATA+1
	LD	B,A
	LD	C,0	;x=0
	LD	E,0	;offset
	INC	B
GETCHR2.2:
	DEC	B
	JR	Z,GETCHR2.8
	LD	A,(HL)
	INC	HL
	INC	E
	INC	C
	CP	09H
	JR	NZ,GETCHR2.2
	DEC	C
GETCHR2.3:
	DEC	B
	INC	C
	LD	A,C
@09:	AND	07H
	JR	NZ,GETCHR2.3
	INC	B
	JR	GETCHR2.2
GETCHR2.8:
	LD	A,(HL)
	RET
;
;	Convert offset to X
;
CONV_X:
	LD	B,A
	LD	HL,LINE_DATA+1
	LD	C,0
	INC	B
CONV_X1:
	DEC	B
	JR	Z,CONV_X6
	LD	A,(HL)
	INC	HL
	INC	C
	CP	09H
	JR	NZ,CONV_X1
	DEC	C
CONV_X5:
	INC	C
	LD	A,C
@10:	AND	07H
	JR	NZ,CONV_X5
	JR	CONV_X1
CONV_X6:
	LD	A,C
	RET
;
;
;
;==========================

PUT:	CALL	CSR_OFF
	LD	HL,0000H
	LD	(V_ADR),HL
	LD	IX,(TOP_PNT)

	LD	E,0	;y=0
PUT.1:
	LD	D,0	;x=0

	LD	HL,(V_ADR)
	LD	A,40H
	CALL	SETV_ADR
	LD	A,(WRVDP)
	LD	C,A

	LD	A,(IX+0)
	INC	IX
	OR	A
	JP	Z,PUT.50
	LD	B,A
PUT.10:
	LD	A,(IX+0)
	INC	IX
	CP	20H
	JR	C,PUT.12
	OUT	(C),A
	INC	D
	DJNZ	PUT.10
	JP	PUT.50
PUT.12:
	CP	09H
	JR	Z,PUT.20
	CP	1AH
	JR	Z,PUT.30
	OUT	(C),A	;char
	INC	D
	JR	PUT.40

;	09H

PUT.20:
	OUT	(C),A
	INC	D
	LD	A,D
@11:	AND	07H
	LD	A,' '
	JP	NZ,PUT.20
	JP	PUT.40

;	1AH

PUT.30:
;	POP	BC
	LD	A,1AH
	OUT	(C),A
;	INC	D
PUT.35:	CALL	ERASE
	PUSH	BC
	LD	HL,(V_ADR)
	LD	A,(WIDTH)	;80
	LD	C,A
	LD	B,0
	ADD	HL,BC
	LD	(V_ADR),HL
	POP	BC
	LD	D,0
	INC	E
	LD	HL,(V_ADR)
	LD	A,40H
	CALL	SETV_ADR
	LD	A,' '
	OUT	(C),A
	LD	A,E
	CP	24
	JP	NZ,PUT.35
	JR	PUT.90

PUT.40:
	DJNZ	PUT.10
PUT.50:
	LD	A,D
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	JR	Z,PUT.70
	LD	A,0DH
	OUT	(C),A
PUT.70:
	CALL	ERASE
PUT.80:
	LD	HL,(V_ADR)
	LD	A,(WIDTH)	;80
	LD	C,A
	LD	B,0
	ADD	HL,BC
	LD	(V_ADR),HL
	INC	IX

	INC	E
	LD	A,E
	CP	24
	JP	NZ,PUT.1
PUT.90:
	EI
	CALL	SETLDATA
	CALL	CHECK_XY
	CALL	CSR_ON
	RET
;
;
;
ERASE:
	LD	A,D
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	JR	NC,ERASE.6

	PUSH	DE
	LD	HL,LINE_LEN
	LD	D,0
	ADD	HL,DE
	LD	A,(HL)
	POP	DE
	LD	B,D
	INC	B
ERASE.2:
	CP	B
	JR	C,ERASE.5
	LD	L,' '
	OUT	(C),L
	INC	B
	JR	ERASE.2
ERASE.5:
	LD	A,D
	PUSH	DE
	LD	HL,LINE_LEN
	LD	D,0
	ADD	HL,DE
	LD	(HL),A
	POP	DE
	RET
ERASE.6:
	LD	A,(WIDTH)
	CP	40+1
	LD	D,80-1
	JR	NC,ERASE.5
	LD	D,40-1
	JR	ERASE.5

;
;
;
CHECK_XY:
	LD	A,(LINE_DATA2)
	LD	B,A
	LD	A,(CSR_X)	;cp csr_x,line len
	CP	B
	JR	C,CHECK_XY5
	PUSH	AF
	LD	A,(LINE_DATA2)
	SUB	1
	JR	C,CHECK_XY3
	CALL	GETCHR
	CP	1AH
	JR	NZ,CHECK_XY3
	POP	AF
	LD	A,(LINE_DATA2)
	DEC	A
	LD	(CSR_X),A
	RET
CHECK_XY3:
	POP	AF
	RET	Z
	LD	A,(LINE_DATA2)
	LD	(CSR_X),A
	RET
CHECK_XY5:
	CALL	GETCHR
	CP	09H
	RET	NZ

CHECK_XY6:
	LD	A,(CSR_X)
@12:	AND	07H
	RET	Z
	LD	A,(CSR_X)
	SUB	1
	RET	C
	CALL	GETCHR
	CP	09H
	RET	NZ
	LD	A,(CSR_X)
	DEC	A
	LD	(CSR_X),A
	JR	CHECK_XY6
;
;
;
SETLDATA:
	LD	HL,(LINE)
	CALL	GET_ADR2
	LD	(LINE_PNT),HL

	LD	DE,LINE_DATA2+1
	LD	B,(HL)
	LD	C,0	;x
	INC	HL
	INC	B
SETLDATA2:
	DEC	B
	JR	Z,SETLDATA7
	LD	A,(HL)
	LD	(DE),A
	INC	HL
	CP	09H
	JR	Z,SETLDATA3
	INC	DE
	INC	C
	JR	SETLDATA2
SETLDATA3:
	LD	A,09H
	LD	(DE),A
	INC	DE
	INC	C
	LD	A,C
@13:	AND	07H
	JR	NZ,SETLDATA3
	JR	SETLDATA2
SETLDATA7:
	XOR	A
	LD	(DE),A
	LD	A,C
	LD	(LINE_DATA2),A
	RET
;
;
;
GET_ADR2:
	LD	DE,(TOP_L)
	CALL	DCOMPR
	JR	C,GET_ADR_BACK
	JR	GET_ADR_NEXT
;
;
;
GET_ADR_BACK:
	EX	DE,HL
	LD	HL,(TOP_PNT)
	LD	BC,(TOP_L)
GET_ADR_BACK1:
	LD	A,C
	CP	E
	JR	NZ,GET_ADR_BACK2
	LD	A,B
	CP	D
	RET	Z
GET_ADR_BACK2:
	DEC	HL
	LD	A,(HL)
	PUSH	BC
	LD	B,0
	LD	C,A
	INC	BC
	OR	A
	SBC	HL,BC
	POP	BC
	DEC	BC
	JR	GET_ADR_BACK1
;
;
;
GET_ADR_NEXT:
	EX	DE,HL
	LD	HL,(TOP_PNT)
	DEC	HL
	LD	BC,(TOP_L)
	JR	GET_ADR.1
;
;	Get address to line HL
;
GET_ADR:
	EX	DE,HL
	LD	HL,TEXT
	LD	BC,0001H
GET_ADR.1:
	INC	HL
	LD	A,C
	CP	E
	JR	NZ,GET_ADR.2
	LD	A,B
	CP	D
	RET	Z
GET_ADR.2:
	LD	A,(HL)
	INC	HL
	PUSH	BC
	LD	B,0
	LD	C,A
	ADD	HL,BC
	POP	BC
	INC	BC
	JR	GET_ADR.1

;==========================
;
;
;
SAVE:
	CALL	SETLINE

;	LD	(STACK),SP

	LD	HL,FILE+12
	LD	B,25H-12
SAVE1:	LD	(HL),00H
	INC	HL
	DJNZ	SAVE1

	LD	C,16H
	LD	DE,FILE
	CALL	0005H
	OR	A
	JP	NZ,DISK_ERR

	LD	C,0FH
	LD	DE,FILE
	CALL	0005H
	OR	A
	JP	NZ,DISK_ERR

	LD	HL,0000H
	LD	(FILE+33),HL
	LD	(FILE+35),HL
	INC	L
	LD	(FILE+14),HL

	LD	HL,USRDMA
	LD	(F_PNT),HL
	LD	HL,BUFF_BYTE
	LD	(F_LEFT),HL

	LD	HL,TEXT+1
	LD	DE,(LINE_NO)
SAVE10:	LD	B,(HL)
	INC	HL
	LD	C,0
	PUSH	DE
	INC	B
SAVE15:	
	DEC	B
	JR	Z,SAVE20
	LD	A,(HL)
	CP	1AH
	JR	Z,SAVE30
	INC	HL
	INC	C
	CALL	WRITEF
	CP	09H
	JR	NZ,SAVE15
	DEC	C
SAVE17:
	INC	C
	LD	A,C
@14:	AND	07H
	JR	NZ,SAVE17
	JR	SAVE15
SAVE20:	
	LD	A,C
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	JR	Z,SAVE40

	LD	A,0DH
	CALL	WRITEF
	LD	A,0AH
SAVE30:	CALL	WRITEF
SAVE40:	INC	HL
	POP	DE
	DEC	DE
	LD	A,D
	OR	E
	JR	NZ,SAVE10

	CALL	CLOSE
	RET
;
;
;
LOAD:
;	LD	(STACK),SP

	LD	C,0FH
	LD	DE,FILE
	CALL	0005H
	OR	A
	JP	NZ,DISK_ERR

LOAD5:
	LD	C,1AH
	LD	DE,USRDMA
	CALL	0005H

	XOR	A
	LD	(F_FLG),A
	LD	H,A
	LD	L,A
	LD	(F_LEFT),HL
	LD	(FILE+33),HL
	LD	(FILE+35),HL
	INC	L
	LD	(FILE+14),HL

	LD	HL,(TEXT_MAX)
	LD	A,L
	LD	(LOAD11),A
	LD	A,H
	LD	(LOAD12),A

	LD	A,(WIDTH)
	LD	(LOAD16),A

	EXX
	LD	BC,(F_LEFT)
	LD	HL,(F_PNT)
	EXX

	LD	HL,TEXT
	LD	A,0
	LD	DE,0001H	;line no.
LOAD10:
	LD	(HL),A		;prev line len.
	INC	HL

	LD	A,L
LOAD11	EQU	$+1
	SUB	00H
	LD	A,H
LOAD12	EQU	$+1
	SBC	A,00H
	JP	NC,ERR_TOO_BIG

;	PUSH	HL
;	PUSH	DE
;	LD	DE,(TEXT_MAX)
;	OR	A
;	SBC	HL,DE
;	POP	DE
;	POP	HL
;	JP	NC,ERR_TOO_BIG	;if HL >= [TEXT_MAX]

	PUSH	DE
	PUSH	HL
	INC	HL
	LD	C,0		;x
	LD	B,C		;count

LOAD15:	LD	A,C
LOAD16	EQU	$+1
	CP	80
	JR	Z,LOAD25	;if C == (WIDTH)

;	CALL	READF
;	JP	C,DISK_ERR
	EXX
	LD	A,B
	OR	C
	JP	NZ,LOAD17
	LD	(F_LEFT),BC
	EXX
	CALL	READF
	JP	C,DISK_ERR
	EXX
	LD	BC,(F_LEFT)
	LD	HL,(F_PNT)
	EXX
	JP	LOAD18

LOAD17:	DEC	BC
	LD	A,(HL)
	INC	HL
	EXX
LOAD18:
	CP	20H
	JR	C,LOAD19
	LD	(HL),A
	INC	HL
	INC	B
	INC	C
	JP	LOAD15
LOAD19:
	CP	0DH
	JR	Z,LOAD20	;if A == 0DH
	LD	(HL),A
	INC	HL
	INC	B
	INC	C
	CP	1AH
	JR	Z,LOAD30
	CP	09H
	JR	NZ,LOAD15

	LD	A,C
@15:	ADD	A,07H
@50:	AND	0F8H
	LD	C,A
	JP	LOAD15

LOAD20:
;	CALL	READF		;Skip 0AH
	EXX
	LD	A,B
	OR	C
	JP	NZ,LOAD21
	LD	(F_LEFT),BC
	EXX
	CALL	READF
	JP	C,DISK_ERR
	EXX
	LD	BC,(F_LEFT)
	LD	HL,(F_PNT)
	EXX
	JP	LOAD22

LOAD21:	DEC	BC
	LD	A,(HL)
	INC	HL
	EXX
LOAD22:

LOAD25:	POP	DE
	LD	A,B		;A = B
	LD	(DE),A
	POP	DE
	INC	DE		;line no. ++
	JP	LOAD10

LOAD30:	LD	(HL),B
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(END_TEXT),HL
	POP	DE
	LD	A,B
	LD	(DE),A
	POP	HL
	LD	(LINE_NO),HL

	LD	C,10H
	LD	DE,FILE
	CALL	0005H
	RET


ERR_TOO_BIG:
	LD	DE,EMES_TOO_BIG
	CALL	ERROR
	JP	0000H

EMES_TOO_BIG:
	DB	0,'Edit file is too big to edit!',0
	DB	0FFH
;
;
;
WRITEF:	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	(CODE),A
WRITEF0:
	LD	HL,(F_LEFT)
	LD	A,H
	OR	L
	JR	Z,WRITEF2
	DEC	HL
	LD	(F_LEFT),HL
	LD	HL,(F_PNT)
	LD	A,(CODE)
	LD	(HL),A
	INC	HL
	LD	(F_PNT),HL
	OR	A
WRITEF1:
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET
WRITEF2:
	LD	C,1AH
	LD	DE,USRDMA
	LD	(F_PNT),DE
	CALL	0005H
	LD	C,26H
	LD	DE,FILE
	LD	HL,BUFF_BYTE
	LD	(F_LEFT),HL
	CALL	0005H
	OR	A
	JR	Z,WRITEF0
WRITEF3:
	JP	DISK_ERR
;
;
;
CLOSE:	LD	HL,BUFF_BYTE
	LD	DE,(F_LEFT)
	OR	A
	SBC	HL,DE
	JR	Z,CLOSE2
	PUSH	HL
	LD	C,1AH
	LD	DE,USRDMA
	CALL	0005H
	POP	HL
	LD	C,26H
	LD	DE,FILE
	CALL	0005H
	OR	A
	JP	NZ,DISK_ERR
CLOSE2:
	LD	DE,FILE
	LD	C,10H
	CALL	0005H
	OR	A
	RET
;
;
;
READF:	PUSH	HL

READF0:	LD	HL,(F_LEFT)
	LD	A,H
	OR	L
	JR	Z,READF2
	DEC	HL
	LD	(F_LEFT),HL
	LD	HL,(F_PNT)
	LD	A,(HL)
	INC	HL
	LD	(F_PNT),HL
	OR	A
READF1:	POP	HL
	RET

READF2:	LD	A,(F_FLG)
	OR	A
	JR	NZ,READF3
	PUSH	DE
	PUSH	BC
	LD	HL,USRDMA
	LD	(F_PNT),HL
	LD	C,27H
	LD	DE,FILE
	LD	HL,BUFF_BYTE
	CALL	0005H
	LD	(F_LEFT),HL
	LD	(F_FLG),A
	POP	BC
	POP	DE
	JP	READF0

READF3:	LD	A,1AH
;	SCF
	JR	READF1

;
;

CSR_ON:
	LD	A,1BH
	CALL	DOS02
	LD	A,'y'
	CALL	DOS02
	LD	A,'5'
	JP	DOS02
;
;
;

CSR_OFF:
	LD	A,1BH
	CALL	DOS02
	LD	A,'x'
	CALL	DOS02
	LD	A,'5'
	JP	DOS02
;
;
;

CSR_NORMAL:
	LD	A,1BH
	CALL	DOS02
	LD	A,'x'
	CALL	DOS02
	LD	A,'4'
	JP	DOS02
;
;
;

CSR_INSERT:
	LD	A,1BH
	CALL	DOS02
	LD	A,'y'
	CALL	DOS02
	LD	A,'4'
	JP	DOS02

;
;	[HL..] -> [DE..] BC bytes
;

COPY:	PUSH	HL
	OR	A
	SBC	HL,DE
	POP	HL
	JR	C,COPY10
;	LDIR
	LD	A,C
	AND	0FH
	JR	Z,COPY04
COPY03:
	LDI
	DEC	A
	JP	NZ,COPY03
COPY04:
	LD	A,B
	OR	C
	RET	Z
COPY05:
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI

	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	LDI
	JP	PE,COPY05
	RET

COPY10:	ADD	HL,BC
	DEC	HL

	EX	DE,HL
	ADD	HL,BC
	DEC	HL
	EX	DE,HL

;	LDDR

	LD	A,C
	AND	0FH
	JR	Z,COPY14
COPY13:
	LDD
	DEC	A
	JP	NZ,COPY13
COPY14:
	LD	A,B
	OR	C
	RET	Z
COPY15:
	LDD
	LDD
	LDD
	LDD
	LDD
	LDD
	LDD
	LDD

	LDD
	LDD
	LDD
	LDD
	LDD
	LDD
	LDD
	LDD
	JP	PE,COPY15
	RET
;
;
;
CHECK_SHFT:
	LD	A,(CTRL&SHFT_FLG)
	OR	A
	RET	NZ

	LD	A,(CTRL&SHFT_BIT)
	BIT	7,A
	JR	Z,CHECK_SHFT.10
	JR	CHECK_SHFT.20

CHECK_SHFT.10:
	LD	A,6
	LD	IX,0141H
	CALL	BIOS
CHECK_SHFT.20:
	AND	1
	RET
;
;
;
CHECK_CTRL:
	LD	A,(CTRL&SHFT_FLG)
	OR	A
	RET	NZ

	LD	A,(CTRL&SHFT_BIT)
	BIT	7,A
	JR	Z,CHECK_CTRL.10
	JR	CHECK_CTRL.20

CHECK_CTRL.10:
	LD	A,6
	LD	IX,0141H
	CALL	BIOS
CHECK_CTRL.20:
	AND	2
	RET
;
;
;
CHPUT:	
;	LD	IX,00A2H
;	CALL	BIOS
;	RET

	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF

	LD	HL,(V_ADR)
	LD	IX,004DH
	CALL	BIOS

	LD	HL,(V_ADR)
	INC	HL
	LD	(V_ADR),HL

	POP	AF
	POP	BC
	POP	DE
	POP	HL
	RET

;
;
;
CSR_LOC:
	LD	DE,(CSR_Y)
	PUSH	HL	;locate D,E
	PUSH	DE
	PUSH	BC
	PUSH	AF
	EX	DE,HL
	INC	H
	INC	L
	LD	IX,00C6H
	CALL	BIOS
	POP	AF
	POP	BC
	POP	DE
	POP	HL
LOCATE:	
	PUSH	HL
	PUSH	DE
	PUSH	BC

	LD	H,0	;HL= y * 80
	LD	L,E
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	LD	B,H
	LD	C,L
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC

	LD	A,(WIDTH)
	CP	80
	JR	NZ,$+3
	ADD	HL,HL

	LD	B,0
	LD	C,D
	ADD	HL,BC

	LD	(V_ADR),HL
	LD	A,40H
	CALL	SETV_ADR

	POP	BC
	POP	DE
	POP	HL
	RET
;
;
;
UPPER:	CP	'a'
	RET	C
	CP	'z'+1
	RET	NC
	SUB	20H
	RET
;
;
;
DCOMPR:	LD	A,H
	CP	D
	RET	NZ
	LD	A,L
	CP	E
	RET
;
;
;
BIOS:	LD	IY,(0FCC0H)
	CALL	001CH
	RET
;
;
;
DOS02:	PUSH	IX
	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
	PUSH	AF
	LD	IX,00A2H
	LD	IY,(0FCC0H)
	CALL	001CH
	POP	AF
	POP	BC
	POP	DE
	POP	HL
	POP	IY
	POP	IX
	RET
;
;
;
SETV_ADR:
	PUSH	BC
	PUSH	AF
	LD	A,(WRVDP)
	LD	C,A
	INC	C
	DI
	LD	A,(WIDTH)
	CP	41
	JR	C,SETV_ADR2
	XOR	A
	OUT	(C),A
	LD	A,14+80H
	OUT	(C),A
SETV_ADR2:
	PUSH	IX
	OUT	(C),L
	POP	IX
	POP	AF
	OR	H
	OUT	(C),A
	POP	BC
	RET
;
;
;
SET_PCG:
	LD	HL,PCG_09
	LD	DE,09H*8+1000H
	LD	B,8
	CALL	LDIRVM
	LD	HL,PCG_0D
;	LD	HL,PCG_00
	LD	DE,0DH*8+1000H
	LD	B,8
	CALL	LDIRVM
	LD	HL,PCG_1A
	LD	DE,1AH*8+1000H
	LD	B,8
	CALL	LDIRVM
	LD	HL,PCG_04
	LD	DE,04H*8+1000H
	LD	B,8
	CALL	LDIRVM
	RET

	LD	HL,PCG_30
	LD	DE,30H*8+1000H
	LD	B,8
	CALL	LDIRVM
	RET
;
;
;
LDIRVM:	LD	A,(WIDTH)
	CP	40+1
	JR	NC,LDIRVM2
	LD	A,D
	SUB	08H
	LD	D,A
LDIRVM2:
	EX	DE,HL
	LD	A,40H
	CALL	SETV_ADR
	EX	DE,HL
	LD	A,(WRVDP)
	LD	C,A
	OTIR
	EI
	RET
;
;
;
SETW_OFFSET:
	PUSH	DE
	LD	DE,0000H
	LD	A,(WIDTH)
	CP	80
	JR	NZ,SETW_OFFSET2
	LD	A,(CSR_X)
	CP	40
	JR	NC,$+4
	LD	D,40

SETW_OFFSET2:
	LD	A,(CSR_Y)
	CP	12
	JR	NC,$+4
	LD	E,12

	LD	(W_Y),DE
	POP	DE
	RET
;
;
;
LOCATE_W2:
	LD	A,(W_X2)
	ADD	A,D
	LD	D,A
	LD	A,(W_Y2)
	ADD	A,E
	LD	E,A
	CALL	LOCATE
	RET
;
;
;
W_OPEN:
	CALL	SETW_OFFSET
	XOR	A
	LD	(SELECT_N),A
	LD	(W_CSR),A

	LD	A,(IX+2)
	LD	(W_WIDTH_X),A
	LD	A,(IX+3)
	LD	(W_WIDTH_Y),A

	LD	A,(WIDTH)
	CP	40+1
	LD	A,80-1
	JR	NC,$+4
	LD	A,40-1

	LD	DE,LINE_LEN
	LD	B,24
W_OPEN1:LD	(DE),A
	INC	DE
	DJNZ	W_OPEN1

	LD	D,(IX+0)
	LD	A,(W_X)
	ADD	A,D
	LD	D,A
	LD	(W_X2),A
	LD	E,(IX+1)
	LD	A,(W_Y)
	ADD	A,E
	LD	E,A
	LD	(W_Y2),A
	CALL	LOCATE

	PUSH	HL
	LD	A,(WRVDP)
	LD	C,A

	LD	B,(IX+2)
	LD	A,'='
W_OPEN2:OUT	(C),A
	DJNZ	W_OPEN2
	POP	HL

	LD	B,(IX+3)
	DEC	B
	DEC	B
W_OPEN4:PUSH	BC

	INC	E
	CALL	LOCATE

	LD	A,04H	;'='
	OUT	(C),A
	LD	B,(IX+2)
	DEC	B
	DEC	B
	LD	A,' '
W_OPEN6:OUT	(C),A
	DJNZ	W_OPEN6
	LD	A,04H	;'='
	OUT	(C),A

	POP	BC
	DJNZ	W_OPEN4

	INC	E
	CALL	LOCATE

	LD	B,(IX+2)
	LD	A,'='
W_OPEN7:OUT	(C),A
	DJNZ	W_OPEN7

	INC	IX
	INC	IX
	INC	IX
	INC	IX

W_MAKE:
	LD	IY,SELECT_W
W_MAKE10:
	LD	A,(IX+0)
	INC	IX
	CP	0FFH
	RET	Z;	JP	Z,W_SEL
	CP	00H
	JR	Z,W_MES
	CP	01H
	JR	Z,W_ITEM
	CP	02H
	JR	Z,W_TITLE
	CP	03H
	JR	Z,W_POS

	JR	W_MAKE10
;
;
W_MES:
	LD	DE,(W_POS_Y)
	CALL	LOCATE
	INC	E
	LD	(W_POS_Y),DE
W_MES2:	LD	A,(IX+0)
	INC	IX
	OR	A
	JR	Z,W_MES10
	OUT	(C),A
	JR	W_MES2
W_MES10:
	JP	W_MAKE10
;
;
W_ITEM:
	LD	A,(IX+0)
	LD	(IY+0),A
	INC	IX
	INC	IY
	LD	A,(IX+0)
	LD	(IY+0),A
	INC	IX
	INC	IY
	LD	A,(SELECT_N)
	INC	A
	LD	(SELECT_N),A
	JP	W_MAKE10
;
;
;
W_TITLE:
	PUSH	DE

	LD	DE,0101H
	CALL	LOCATE_W2
	LD	A,(WRVDP)
	LD	C,A
W_TITLE1:
	LD	A,(IX+0)
	INC	IX
	OR	A
	JR	Z,W_TITLE5
	OUT	(C),A
	JR	W_TITLE1
W_TITLE5:
	LD	DE,0102H
	CALL	LOCATE_W2
	LD	A,(W_WIDTH_X)
	DEC	A
	DEC	A
	LD	B,A
	LD	A,'-'
W_TITLE6:
	OUT	(C),A
	DJNZ	W_TITLE6
	POP	DE
	JP	W_MAKE10
;
;
;
W_POS:
	LD	H,(IX+0)
	LD	A,(W_X2)
	ADD	A,H
	LD	H,A
	LD	L,(IX+1)
	LD	A,(W_Y2)
	ADD	A,L
	LD	L,A
	LD	(W_POS_Y),HL
	INC	IX
	INC	IX
	JP	W_MAKE10
;
;
;
W_SEL:
	LD	A,'*'
	CALL	W_SELSUB

	LD	C,07H
	CALL	0005H

	PUSH	AF
	LD	A,(W_CSR)
	LD	C,A
	POP	AF

	CP	1EH	;UP
	JR	NZ,W_SEL10
	DEC	C
	JR	W_SEL50
W_SEL10:
	CP	1FH	;DOWN
	JR	NZ,W_SEL12
	INC	C
	JR	W_SEL50
W_SEL12:
	CP	0DH
	JR	NZ,W_SEL14
	LD	A,C
	RET
W_SEL14:
	CP	1BH
	JR	NZ,W_SEL16
	LD	A,0FFH
	RET
W_SEL16:

W_SEL50:
	LD	A,C
	CP	0F0H
	JR	C,W_SEL52
	LD	C,0
	JR	W_SEL59

W_SEL52:
	LD	A,(SELECT_N)
	CP	C
	JR	NZ,W_SEL54
	DEC	C
	JR	W_SEL59
W_SEL54:

W_SEL59:
	PUSH	BC
	LD	A,' '
	CALL	W_SELSUB
	POP	BC
	LD	A,C
	LD	(W_CSR),A
	JR	W_SEL
;
;
W_SELSUB:
	PUSH	BC
	PUSH	AF
	LD	HL,SELECT_W
	LD	A,(W_CSR)
	LD	B,0
	LD	C,A
	ADD	HL,BC
	ADD	HL,BC
	LD	D,(HL)
	INC	HL
	LD	E,(HL)
	CALL	LOCATE_W2
	LD	A,(WRVDP)
	LD	C,A
	POP	AF
	OUT	(C),A
	POP	BC
	RET
;
;
;
W_Y:	DS	1
W_X:	DS	1

W_Y2:	DS	1
W_X2:	DS	1

W_POS_Y:DS	1
W_POS_X:DS	1

W_WIDTH_X:
	DS	1
W_WIDTH_Y:
	DS	1

W_CSR:	DS	1

SELECT_N:
	DS	1
SELECT_W:
	DS	2*10
;
;
;
PCG_00:	DB	0,0,0,0,0,0,0,0
PCG_09:	DB	00H,00H,00H,00H,20H,30H,78H,00H
PCG_0D:	DB	00H,10H,10H,10H,1CH,18H,10H,00H
PCG_1A:	DB	00H,78H,78H,78H,78H,78H,78H,00H
PCG_04:	DB	48H,48H,48H,48H,48H,48H,48H,00H

PCG_30:	;DB	70H,88H,98H,0A8H,0C8H,88H,70H,00H	;original
	DB	00000000B
	DB	00000000B
	DB	01110000B
	DB	10001000B
	DB	10101000B
	DB	10001000B
	DB	01110000B
	DB	00000000B

CONV_CHR:
	LD	E,A
	LD	HL,TBL_CONV
	LD	B,0
	LD	C,A
	ADD	HL,BC
	LD	A,(HL)
	OR	A
	JR	Z,CONV_CHR9
	RET
CONV_CHR9:
	LD	A,E
	RET
;
;
;
SET_FUNCTION:
	LD	HL,0F87FH
	LD	B,16*10
	XOR	A
SET_FUNCTION1:
	LD	(HL),A
	INC	HL
	DJNZ	SET_FUNCTION1

	LD	DE,FUNC_DATA
	LD	HL,0F87FH
	LD	B,10
SET_FUNCTION2:
	PUSH	BC
	LD	A,(DE)
	LD	(HL),A
	INC	DE
	LD	BC,16
	ADD	HL,BC
	POP	BC
	DJNZ	SET_FUNCTION2
	RET

FUNC_DATA:
	DB	'D'-40H
	DB	'U'-40H
	DB	'S'-40H
	DB	'Y'-40H
	DB	'X'-40H

	DB	'D'-40H
	DB	'U'-40H
	DB	'W'-40H
	DB	'O'-40H
	DB	'Z'-40H

;
;
;

SET_TAB_SIZE:
	LD	(TAB_SIZE),A
	DEC	A
	LD	C,A

	LD	HL,TAB_TABLE
	CALL	SET_TAB_SIZE_SUB

	LD	A,C
	CPL
	LD	C,A
	LD	HL,TAB_TABLE2
	CALL	SET_TAB_SIZE_SUB
	RET

;
;
;

SET_TAB_SIZE_SUB:
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	LD	A,D
	OR	E
	RET	Z

	INC	DE
	LD	A,C
	LD	(DE),A

	JR	SET_TAB_SIZE_SUB

;
;

ERROR:
	LD	A,(FLG_STARTUP)
	OR	A
	JR	Z,ERROR.1

ERROR.0:
	INC	DE
	LD	A,(DE)
	OR	A
	RET	Z
	PUSH	DE
	LD	C,02H
	LD	E,A
	CALL	0005H
	POP	DE
	JR	ERROR.0


ERROR.1:
	LD	SP,(STACK)

	PUSH	DE
	LD	IX,W_DAT9
	CALL	W_OPEN
	POP	IX
	CALL	W_MAKE
	CALL	CHGET

	LD	HL,LINE_LEN
	LD	B,24
	LD	A,(WIDTH)
	DEC	A
ERROR.2:
	LD	(HL),A
	INC	HL
	DJNZ	ERROR.2
	CALL	PUT

	RET

W_DAT9:	DB	2,4
	DB	30,6
	DB	2,' Warning',0
	DB	3,2,3
	DB	0FFH


DISK_ERR:
	LD	SP,(STACK)
	LD	C,10H
	LD	DE,FILE
	CALL	0005H

	LD	DE,DISK_ERR1
	CALL	ERROR
	CALL	PUT
	RET

DISK_ERR1:
	DB	0,'Disk error',0,0FFH
;
;
;
EMES1:	DB	'File error!$'
EMES2:	DB	'File make error!$'

EMES_OPT:DB	'Option error!$'

HARD_ERR_ADR:
	DW	HARD_ERR

HARD_ERR:
	LD	A,C
	LD	DE,HARD_E1
	BIT	7,A
	JR	NZ,HARD_ERR5
	CP	1
	LD	DE,HARD_E2
	JR	Z,HARD_ERR5
	CP	0AH
	LD	DE,HARD_E7
	JR	Z,HARD_ERR5
	CP	0BH
	LD	DE,HARD_E8
	JR	Z,HARD_ERR5
	AND	0FEH
	CP	02H
	LD	DE,HARD_E3
	JR	Z,HARD_ERR5
	CP	04H
	LD	DE,HARD_E4
	JR	Z,HARD_ERR5
	CP	06H
	LD	DE,HARD_E5
	JR	Z,HARD_ERR5
	CP	08H
	LD	DE,HARD_E6
	JR	Z,HARD_ERR5
	CP	0CH
	LD	DE,HARD_E8
	JR	Z,HARD_ERR5

HARD_ERR5:
	LD	SP,(STACK)
	CALL	ERROR
	CALL	PUT
	RET

HARD_E1:DB	0,'Bad Fat',0,0FFH
HARD_E2:DB	0,'Write Protect',0,0FFH
HARD_E3:DB	0,'Not Ready',0,0FFH
HARD_E4:DB	0,'CRC Error',0,0FFH
HARD_E5:DB	0,'Seek Error',0,0FFH
HARD_E6:DB	0,'Record Not Found',0,0FFH
HARD_E7:DB	0,'Unsupported Media',0,0FFH
HARD_E8:DB	0,'Write Error',0,0FFH
HARD_E9:DB	0,'Other Error',0,0FFH

TAB_TABLE:
	DW	@01,@02,@03,@04,@05,@06,@07,@08,@09
	DW	@10,@11,@12,@13,@14,@15
	DW	0000H

TAB_TABLE2:
	DW	@50
	DW	0000H
;
;
;========================

;
;	FLAG of SWITCH
;
SAVE_SCREEN_MODE:	DS	1
SAVE_WIDTH:	DS	2

FLG_MAKE:	DS	1

FLG_STARTUP:	DS	1

TAB_FLG:	DS	1
CR_FLG:		DS	1
AUTO_TAB_FLG:	DS	1
KEY_FLG:	DS	1
LOGICAL_LINE_FLG:DS	1
;
;	VDP port address
;
RDVDP:	DS	1
WRVDP:	DS	1
;
;
;
UP_STEP:	DW	24
DOWN_STEP:	DW	24

TAB_SIZE:DB	8

WIDTH:	DB	80
;
;RANGE_X:	DB	1

RANGE_H:	DB	0
RANGE_L:	DB	23
;
CNT:	DS	1
EDIT:	DS	1
MODE:	DS	1
CODE:	DS	1
CSR_Y:	DS	1
CSR_X:	DS	1
DEL_FLG:DS	1

TOP_PNT:	DS	2
V_ADR:		DS	2

CTRL&SHFT_FLG:	DS	1
CTRL&SHFT_BIT:	DS	1

SEARCH_FLG:	DS	1
SEARCH_BACK_WORK:	DS	1
SEARCH_LEN:	DS	1
SEARCH_WORD:	DS	40

BLOCK_TOP:	DS	2
BLOCK_END:	DS	2
BLOCK_TOP_PNT:	DS	2
BLOCK_END_PNT:	DS	2
BLOCK_BYTE:	DS	2

INPUT_WORK:	DS	40

HARD_ERR_PNT:	DS	2

STACK:	DS	2

TEXT_MAX:	DS	2
WORK_MAX:	DS	2

WORK_PNT:	DS	2

LINE:	DS	2	;current line no.
TOP_L:	DS	2	;top line no. on screen
LINE_NO:DS	2	;total line no.

END_TEXT:DS	2
;
;
;
LINE_PNT:DS	2


LINE_DATA:	DS	200
LINE_DATA2:	DS	200	;for edit
;
;	File
;
FILE:	DS	25H
F_LEFT:	DS	2
F_PNT:	DS	2
F_FLG:	DS	1
;
;
FILE2:	DB	0,'TEMP    TMP'
	DS	25H-12
;
;
LINE_LEN:	DS	24

EOL_WORK:	DS	90

TBL_CONV:	DS	256

SAVE_FUNCTION:	DS	16*10

BLOCK_LINE:	DS	2
BLOCK_FLG:	DS	1

KEY_MACRO_WORK:	DS	1+256*2
KEY_MACRO_LEFT:	DS	1

USRDMA:
	;DS	BUFF_BYTE

TEXT	EQU	$+BUFF_BYTE
