

;TEXT		EQU	2800H

BUFF_BYTE	EQU	800H


	ORG	100H


	LD	A,0FFH
	LD	(FLG_STARTUP),A

	LD	A,0FFH
	LD	(LOGICAL_LINE_FLG),A

	LD	A,(0FCC1H)
	LD	HL,0006H
	CALL	000CH
	LD	(RDVDP),A
	LD	A,(0FCC1H)
	LD	HL,0007H
	CALL	000CH
	LD	(WRVDP),A

	LD	A,(0FCC1H)
	LD	HL,002DH
	CALL	000CH
	OR	A
	LD	A,80
	JR	NZ,$+4
	LD	A,40
	LD	(WIDTH),A

	LD	HL,0080H
	LD	B,0
	LD	C,(HL)
	INC	HL
	ADD	HL,BC
	LD	(HL),00H

	LD	HL,0081H
SWITCH:	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,SWITCH.10
	CP	'/'
	JR	NZ,SWITCH

	LD	A,(HL)
	CALL	UPPER
	INC	HL
	CP	'N'
	JR	Z,SWITCH.1
	CP	'4'
	JR	Z,SWITCH.2
	CP	'T'
	JR	Z,SWITCH.3
	CP	'L'
	JR	Z,SWITCH.4
	LD	C,09H
	LD	DE,EMES_OPT
	CALL	0005H
	JP	0000H

SWITCH.1:
	LD	A,0FFH
	LD	(FLG_MAKE),A
	JR	SWITCH

SWITCH.2:
	LD	A,40
	LD	(WIDTH),A
	JR	SWITCH

SWITCH.3:
	LD	A,(HL)
	INC	HL
	SUB	'0'
	CP	1
	JR	Z,SWITCH.35
	CP	2
	JR	Z,SWITCH.35
	CP	4
	JR	Z,SWITCH.35
	CP	8
	JR	Z,SWITCH.35
	LD	C,09H
	LD	DE,EMES_OPT
	CALL	0005H
	JP	0000H
SWITCH.35:
	PUSH	HL
	CALL	SET_TAB_SIZE
	POP	HL
	JR	SWITCH

SWITCH.4:
	XOR	A
	LD	(LOGICAL_LINE_FLG),A
	JR	SWITCH

SWITCH9:
	JR	SWITCH

SWITCH.10:
	LD	HL,005CH
	LD	DE,FILE
	LD	BC,12
	LDIR

	LD	A,(FLG_MAKE)
	OR	A
	JR	Z,OPEN

	LD	C,1AH
	LD	DE,0F980H
	CALL	0005H

	LD	C,11H
	LD	DE,FILE
	CALL	0005H
	OR	A
	JR	NZ,MAKE

	LD	C,09H
	LD	DE,EMES_MAKE_EXIST_FILE
	CALL	0005H
	RET

EMES_MAKE_EXIST_FILE:
	DB	'Already Exist Make File$'

MAKE:
	JR	INIT

	LD	C,16H
	LD	DE,FILE
	CALL	0005H
	OR	A
	JR	NZ,MAKE_ERR

	LD	C,10H
	LD	DE,FILE
	CALL	0005H
	OR	A
	JR	Z,INIT

MAKE_ERR:
	LD	C,09H
	LD	DE,EMES2
	CALL	0005H
	RET

OPEN:	LD	C,0FH
	LD	DE,FILE
	CALL	0005H
	OR	A
	JR	Z,INIT

	LD	C,09H
	LD	DE,EMES1
	CALL	0005H
	RET

INIT:
	LD	HL,TEXT
	LD	(HL),0
	INC	HL
	LD	(HL),1
	INC	HL
	LD	(HL),1AH
	INC	HL
	LD	(HL),1
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(HL),0
	INC	HL
	LD	(END_TEXT),HL
	LD	HL,1
	LD	(LINE_NO),HL

	LD	HL,(0006H)
	LD	DE,800H
	OR	A
	SBC	HL,DE
	LD	(TEXT_MAX),HL
	LD	(WORK_MAX),HL

	LD	A,(FLG_MAKE)
	OR	A
	CALL	Z,LOAD5

	LD	HL,0F87FH
	LD	DE,SAVE_FUNCTION
	LD	BC,16*10
	LDIR

	CALL	SET_FUNCTION

	LD	HL,(0F323H)
	LD	(HARD_ERR_PNT),HL
	LD	HL,HARD_ERR_ADR
	LD	(0F323H),HL

	LD	A,0FFH
	LD	(BLOCK_FLG),A

INIT20:
	LD	A,(0FCAFH)
	LD	(SAVE_SCREEN_MODE),A
	LD	HL,(0F3AEH)
	LD	(SAVE_WIDTH),HL

	LD	A,(WIDTH)
	LD	(0F3AEH),A
	XOR	A
	LD	(0FCAFH),A
	LD	IX,005FH
	CALL	BIOS

	CALL	SET_PCG

	LD	A,0FFH
	LD	(AUTO_TAB_FLG),A

	LD	HL,LINE_LEN
	LD	B,24
INIT40:	LD	(HL),0
	INC	HL
	DJNZ	INIT40

	XOR	A
	LD	(CSR_X),A
	LD	(CSR_Y),A
	LD	(EDIT),A
	DEC	A
	LD	(MODE),A

	CALL	CSR_INSERT

	LD	HL,1
	LD	(TOP_L),HL
	LD	(LINE),HL

	LD	HL,(TOP_L)
	CALL	GET_ADR
	LD	(TOP_PNT),HL
	CALL	PUT

	XOR	A
	LD	(FLG_STARTUP),A

KEYIN:
	CALL	CSR_LOC
	CALL	CHECK_MEM

	XOR	A
	LD	(CTRL&SHFT_FLG),A

	LD	HL,KEY_MACRO_LEFT
	LD	A,(HL)
	OR	A
	JR	Z,KEYIN.10

	DEC	A
	LD	(HL),A
	LD	B,A
	LD	A,(KEY_MACRO_WORK)
	SUB	B
	DEC	A
	LD	L,A
	LD	H,0
	ADD	HL,HL
	LD	DE,KEY_MACRO_WORK+1
	ADD	HL,DE
	LD	B,(HL)
	INC	HL
	LD	A,(HL)
	OR	80H			;enable CTRL_SHFT_BIT
	LD	(CTRL&SHFT_BIT),A
	LD	A,B
	JR	KEYIN.20

KEYIN.10:
	XOR	A
	LD	(CTRL&SHFT_BIT),A
	LD	C,07H
	CALL	0005H
KEYIN.20:
	LD	HL,KEYIN
	PUSH	HL
	LD	(STACK),SP

	CP	1CH	;RIGHT
	JP	Z,RIGHT
	CP	1DH	;LEFT
	JP	Z,LEFT
	CP	1EH	;UP
	JP	Z,UP
	CP	1FH	;DOWN
	JP	Z,DOWN
	CP	'X'-40H	;1BH
	JP	Z,WINDOW

	CP	'U'-40H
	JP	Z,UP2
	CP	'D'-40H
	JP	Z,DOWN2

	CP	'@'-40H		;1BH
	JP	Z,START_KEY_MACRO

	LD	HL,CTRL&SHFT_FLG
	LD	(HL),0FFH

	CP	'O'-40H
	JP	Z,WINDOW2	;[BLOCK]

	CP	'K'-40H		;CTRL-K (HOME)
	JP	Z,HOME

	CP	'R'-40H		;CTRL-R (INS)
	JP	Z,CHANGE_MODE

	CP	'E'-40H
	JP	Z,EOL

	CP	'P'-40H
	JP	Z,PASTE

	CP	'Y'-40H
	JP	Z,WINDOW4	;[SEARCH]

	CP	'Z'-40H
	JP	Z,WINDOW5	;[SETTING]

	CP	'S'-40H
	JP	Z,SEARCH

	CP	'V'-40H
	JP	Z,WINDOW6	;[MARK]

	CP	'Q'-40H
	JP	Z,WINDOW7	;[JUMP]

	CP	'W'-40H
	JP	Z,SEARCH_BACK

	CP	'L'-40H
	JP	Z,WINDOW8	;[DUMP]

	CP	08H
	JP	Z,BS

	CP	7FH
	JP	Z,DEL

	LD	B,A
	LD	A,(KEY_FLG)
	OR	A
	JP	NZ,KEY_WARN
	LD	A,B

	CP	0DH
	JP	Z,CR

	CP	09H
	JP	Z,CHR
	CP	20H
	JP	NC,CHR

;	LD	A,07H
;	CALL	DOS02

	RET
;
;
;
KEY_WARN:
	LD	DE,KEY_WARN_DAT
	JP	ERROR

KEY_WARN_DAT:
	DB	0,'Memomy is full',0
	DB	0FFH
;
;
;
ABORT:
	LD	HL,(HARD_ERR_PNT)
	LD	(0F323H),HL

	LD	HL,0000H
	LD	(CSR_Y),HL
	CALL	CSR_LOC

	CALL	CSR_ON
	CALL	CSR_NORMAL

	LD	HL,0000H
	LD	(0FCA6H),HL

	LD	HL,(SAVE_WIDTH)
	LD	(0F3AEH),HL
	LD	A,(SAVE_SCREEN_MODE)
	LD	IX,005FH
	CALL	BIOS

	LD	HL,SAVE_FUNCTION
	LD	DE,0F87FH
	LD	BC,16*10
	LDIR

	LD	C,09H
	LD	DE,END_MES
	CALL	0005H

	JP	0000H

END_MES:;DB	0,0,0,0,0
	DB	0CH,'Edit end$'
;
;
;
ADJ_POS:
	LD	HL,(LINE)
	LD	DE,(TOP_L)
	CALL	DCOMPR
	JR	C,ADJ_POS10	;if LINE < TOP_L
	EX	DE,HL
	LD	BC,23+1
	ADD	HL,BC
	EX	DE,HL
	CALL	DCOMPR
	JR	NC,ADJ_POS10	;if LINE > TOP_L + 23
	LD	HL,(LINE)
	LD	DE,(TOP_L)
	OR	A
	SBC	HL,DE
	LD	A,L
	LD	(CSR_Y),A	;CSR_Y = LINE - TOP_L
	RET

ADJ_POS10:
	LD	HL,(LINE)
	LD	DE,10-1
	OR	A
	SBC	HL,DE
	JR	NC,ADJ_POS15
	LD	HL,0
ADJ_POS15:
	INC	HL
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
;	CALL	GET_ADR2
;	LD	(LINE_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	EX	DE,HL
	LD	HL,(LINE)
	OR	A
	SBC	HL,DE
	LD	A,L
	LD	(CSR_Y),A
	RET

;
;
;

START_KEY_MACRO:
	LD	A,(KEY_MACRO_WORK)
	OR	A
	RET	Z
	LD	(KEY_MACRO_LEFT),A
	RET

;
;
;
SEARCH_BACK:
	LD	A,(SEARCH_LEN)
	OR	A
	RET	Z
	CALL	LEFT

	LD	HL,(TOP_L)
	PUSH	HL

	LD	A,0FFH
	LD	(SEARCH_FLG),A
	XOR	A
	LD	(SEARCH_BACK_WORK),A

	CALL	SETLINE
	CALL	CONV2
	LD	A,(CSR_X)
	OR	A
	JP	Z,SEARCH60+1
	CALL	GETCHR2
	LD	A,(SEARCH_LEN)
	LD	B,A
	LD	A,E
	INC	A
	SUB	B
	JP	C,SEARCH60+1
	LD	A,E
	ADD	A,B
	DEC	A
	LD	(SEARCH_BACK_WORK),A
	XOR	A
	LD	(CSR_X),A
	JP	SEARCH01
;
;
;
SEARCH:
	LD	A,(SEARCH_LEN)
	OR	A
	RET	Z
	CALL	RIGHT

	XOR	A
	LD	(SEARCH_FLG),A
	LD	(SEARCH_BACK_WORK),A

	LD	HL,(TOP_L)
	PUSH	HL

	CALL	SETLINE
	CALL	CONV2	;=> LINE_DATA
	LD	A,(CSR_X)
	CALL	GETCHR2
	LD	A,E
	LD	(CSR_X),A

SEARCH01:
	LD	HL,(LINE_PNT)

	CALL	COUNT_L

	PUSH	AF

	LD	HL,(LINE_PNT)
	LD	DE,LINE_DATA

	LD	A,(HL)
	LD	B,A
	OR	A
	JP	Z,SEARCH60
	INC	HL

	LD	A,(CSR_X)
	ADD	A,L
	LD	L,A
	LD	A,H
	ADC	A,00H
	LD	H,A

	LD	A,B
	PUSH	AF
	LD	A,(CSR_X)
	LD	B,A
	POP	AF
	SUB	B
	JP	Z,SEARCH60
	LD	B,A
	LD	(DE),A
	INC	DE

SEARCH3:INC	B
	DEC	B
	JR	Z,SEARCH4
	LD	A,(HL)
	LD	(DE),A
	INC	HL
	INC	DE
	JR	SEARCH3+1
SEARCH4:
	POP	AF	;CP	80

	LD	HL,WIDTH
	CP	(HL)
	JR	C,SEARCH8

	LD	HL,(LINE)
	INC	HL
	PUSH	DE
	CALL	GET_ADR2
	POP	DE
	LD	A,(HL)
	OR	A
	JR	Z,SEARCH8
	PUSH	AF
	LD	A,(SEARCH_LEN)
	LD	B,A
	POP	AF
	CP	B
	JR	C,SEARCH5
	LD	A,B
	DEC	A
SEARCH5:
	LD	B,A
	LD	A,(LINE_DATA)
	ADD	A,B
	LD	(LINE_DATA),A
	INC	HL
	XOR	A
	PUSH	AF
	JR	SEARCH3

SEARCH8:
	XOR	A
	LD	(DE),A

	LD	A,(SEARCH_FLG)
	OR	A
	JR	Z,SEARCH9

	LD	HL,SEARCH_BACK_WORK
	LD	A,(HL)
	OR	A
	PUSH	AF
	LD	A,(LINE_DATA)
	DEC	A
	LD	(CSR_X),A
	POP	AF
	JR	Z,SEARCH9
	LD	HL,LINE_DATA+1
	LD	A,(SEARCH_BACK_WORK)
	LD	B,0
	LD	C,A
	ADD	HL,BC
	LD	(HL),00H
	DEC	A
	LD	(CSR_X),A
	XOR	A
	LD	(SEARCH_BACK_WORK),A

SEARCH9:
	LD	HL,LINE_DATA
	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,SEARCH60+1
	LD	A,(CSR_X)
	LD	C,A
	LD	A,(SEARCH_FLG)
	OR	A
	JR	NZ,SEARCH25
SEARCH15:
	PUSH	HL
	LD	DE,SEARCH_WORD
SEARCH20:
	LD	A,(DE)
	OR	A
	JR	Z,SEARCH70
;	LD	B,A
;	LD	A,(HL)
;	OR	A
;	JR	Z,SEARCH60
;	CP	B
;	JR	NZ,SEARCH30
	CP	(HL)
	JR	NZ,SEARCH30

	INC	HL
	INC	DE
	JP	SEARCH20

SEARCH25:
	LD	B,0
	ADD	HL,BC
SEARCH26:
	PUSH	HL
	LD	DE,SEARCH_WORD
SEARCH27:
	LD	A,(DE)
	OR	A
	JR	Z,SEARCH70
;	LD	B,A
;	LD	A,(HL)
;	OR	A
;	JR	Z,SEARCH29
;	CP	B
;	JR	NZ,SEARCH29
	CP	(HL)
	JR	NZ,SEARCH29

	INC	HL
	INC	DE
	JP	SEARCH27

SEARCH29:
	LD	A,C
	OR	A
	JP	Z,SEARCH60
	POP	HL
	DEC	HL
	DEC	C
	JR	SEARCH26

SEARCH30:
	LD	A,(HL)
	OR	A
	JP	Z,SEARCH60
	POP	HL
	INC	HL
	INC	C
	JR	SEARCH15

SEARCH60:
	POP	HL
	LD	HL,(LINE)
	LD	A,(SEARCH_FLG)
	OR	A
	JP	NZ,SEARCH65
	INC	HL
	LD	DE,(LINE_NO)
	CALL	DCOMPR
	JR	NC,SEARCH82
SEARCH63:
	LD	(LINE),HL
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	LD	(LINE_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	XOR	A
	LD	(CSR_X),A
	JP	SEARCH01
SEARCH65:
	DEC	HL
	LD	A,H
	OR	L
	JR	Z,SEARCH82
	JR	SEARCH63

SEARCH70:
	POP	HL

	LD	A,C
	PUSH	AF
	LD	HL,(LINE)
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	CALL	SETLDATA
	CALL	CONV2
	POP	AF
	CALL	CONV_X
	LD	(CSR_X),A
	POP	HL
	LD	(TOP_L),HL
	CALL	GET_ADR
	LD	(TOP_PNT),HL
	CALL	ADJ_POS
	JP	PUT

SEARCH80:
	POP	HL
SEARCH82:
	LD	HL,(LINE)
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	LD	(LINE_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	XOR	A
	LD	(CSR_Y),A
	LD	(CSR_X),A
	POP	HL
	CALL	PUT
	RET
;
;
;
PASTE:
	LD	HL,EOL_WORK
PASTE2:	LD	A,(HL)
	OR	A
	RET	Z
	PUSH	HL
	CALL	CHR
	POP	HL
	INC	HL
	JR	PASTE2

EOL:	LD	HL,(LINE)
	LD	DE,(LINE_NO)
	CALL	DCOMPR
	RET	Z
	LD	A,(LINE_DATA2)
	OR	A
	JR	Z,EOL_LINE

	CALL	CONV2
	LD	A,(CSR_X)
	CALL	GETCHR2
	OR	A		;+96'10
	JR	Z,EOL20		;+

	LD	A,E
	LD	(LINE_DATA),A
	PUSH	HL
	CALL	SETLINE2
	POP	HL
	LD	DE,EOL_WORK
EOL10:	LD	A,(HL)
	OR	A
	JR	Z,EOL15
	LD	(DE),A
	INC	HL
	INC	DE
	JR	EOL10
EOL15:
	XOR	A
	LD	(DE),A
EOL20:
	JP	PUT

EOL_LINE:
	CALL	GET_ADR2
	CALL	DEL_LINE
	XOR	A
	LD	(CSR_X),A
	JP	PUT
;
;
;
HOME:	CALL	SETLINE

	LD	HL,(TOP_L)
	LD	(LINE),HL
	CALL	SETLDATA

	LD	HL,0000H
	LD	(CSR_Y),HL
	RET
;
;
;
GO_LINE_TOP:
	CALL	SETLINE
	CALL	SETLDATA
	XOR	A
	LD	(CSR_X),A
	RET
;
;
;
GO_LINE_END:
	CALL	SETLINE

	CALL	SETLDATA

	LD	A,(LINE_DATA2)
	LD	(CSR_X),A

	CALL	CHECK_XY
	RET

;	LD	HL,(LINE)
;	LD	DE,(LINE_NO)
;	CALL	DCOMPR
;	RET	NZ

;	DEC	A
;	LD	(CSR_X),A
;	RET
;
;
;
CR:	LD	A,(MODE)
	OR	A
	JR	NZ,CR.10
	XOR	A
	LD	(CSR_X),A
	JP	DOWN

CR.10:
	LD	A,(CSR_X)
	OR	A
	JR	Z,CR.20
	CALL	GETCHR
	OR	A
	JP	NZ,CR.30

	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	CALL	MAKE_LINE

	XOR	A
	LD	(CSR_X),A

	CALL	PUT
	CALL	DOWN

	JP	CHECK_AUTO_TAB
;
;

CR.20:
	CALL	SETLINE

	LD	HL,(LINE)
	CALL	GET_ADR2
	CALL	MAKE_LINE

	XOR	A
	LD	(CSR_X),A
	CALL	PUT
	CALL	DOWN

;	JP	CHECK_AUTO_TAB
;
CHECK_AUTO_TAB:
	LD	A,(AUTO_TAB_FLG)
	OR	A
	RET	NZ

	LD	HL,(LINE)
	DEC	HL
	CALL	GET_ADR2
	LD	A,(HL)
	OR	A
	RET	Z
	LD	B,A
SET_AUTO_TAB.10:
	INC	HL
	LD	A,(HL)
	CP	09H
	JR	Z,SET_AUTO_TAB.20
	CP	20H
	RET	NZ
SET_AUTO_TAB.20:
	PUSH	HL
	CALL	CHR
	POP	HL
	JP	SET_AUTO_TAB.10


CR.30:
	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	CALL	MAKE_LINE

	CALL	CONV2	;=> LINE_DATA

	LD	A,(LINE_DATA2)	;connecting to next?
	PUSH	AF

	LD	A,(CSR_X)
	CALL	GETCHR2		;E= X offset
	LD	A,(LINE_DATA)
	SUB	E
	PUSH	AF

	PUSH	HL
	LD	A,E		;set cut line
	LD	(LINE_DATA),A
	CALL	SETLINE2
	POP	HL

	POP	AF		;A=rest bytes (=len - offset)

	LD	DE,LINE_DATA	;copy to head
	LD	(DE),A
	INC	DE
	LD	B,A
CR.35:	LD	A,(HL)
	LD	(DE),A
	INC	HL
	INC	DE
	DJNZ	CR.35
	XOR	A
	LD	(DE),A

	POP	AF
	LD	HL,WIDTH
	CP	(HL)	;80	;if connecting
	JR	Z,CR.40

	LD	HL,(LINE)
	PUSH	HL
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	CALL	SETLINE2
	POP	HL
	LD	(LINE),HL

	XOR	A
	LD	(CSR_X),A
	CALL	PUT
	JP	DOWN

CR.40:	LD	HL,(LINE)
	PUSH	HL
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	PUSH	HL
	CALL	SETLINE2
	POP	HL
	LD	A,(HL)
	OR	A
	JR	Z,CR.45

	CALL	CUTS
	POP	HL
	LD	(LINE),HL

	XOR	A
	LD	(CSR_X),A
	CALL	PUT
	JP	DOWN

CR.45:	CALL	SETLINE2

	POP	HL
	LD	(LINE),HL

	XOR	A
	LD	(CSR_X),A
	CALL	PUT
	JP	DOWN
;
;
;
MAKE_LINE:
	PUSH	HL
	EX	DE,HL
	LD	HL,(END_TEXT)
	OR	A
	SBC	HL,DE
	LD	B,H
	LD	C,L

	LD	HL,(END_TEXT)
	INC	HL
	INC	HL
	LD	(END_TEXT),HL
	POP	HL
	LD	D,H
	LD	E,L
	INC	DE
	INC	DE

	PUSH	HL
	CALL	COPY
	POP	HL

	LD	(HL),00H
	INC	HL
	LD	(HL),00H

	LD	HL,(LINE_NO)
	INC	HL
	LD	(LINE_NO),HL
	RET

DEL_LINE:
	;HL = text's address

	PUSH	HL
	LD	C,(HL)
	LD	B,0
	INC	HL
	INC	HL
	ADD	HL,BC	;HL = next text address

	PUSH	HL
	EX	DE,HL
	LD	HL,(END_TEXT)
	OR	A
	SBC	HL,DE
	LD	B,H	;BC = (END_TEXT)-HL
	LD	C,L
	POP	HL

	POP	DE

	PUSH	DE
	EX	DE,HL	;(END_TEXT) = DE + BC
	ADD	HL,BC
	LD	(END_TEXT),HL
	EX	DE,HL
	POP	DE

	CALL	COPY

	LD	HL,(LINE_NO)
	DEC	HL
	LD	(LINE_NO),HL
	RET
;
;
;
CHANGE_MODE:
	LD	HL,MODE
	LD	A,(HL)
	CPL
	LD	(HL),A
	OR	A
	JP	Z,CSR_NORMAL
	JP	CSR_INSERT
;
;
;
BS:
	CALL	LEFT
	JP	DEL
;
;
;
DEL:
	LD	A,(CSR_X)
	CALL	GETCHR
	CP	1AH
	RET	Z
	OR	A
	JR	Z,DEL.50

	LD	A,0FFH
	LD	(EDIT),A

	LD	A,(LINE_DATA2)
	PUSH	AF
	CALL	CONV2

	LD	A,(CSR_X)
	CALL	GETCHR2
	LD	B,E

	LD	D,H
	LD	E,L
	INC	HL
	LD	A,(LINE_DATA)
	SUB	B
	INC	A
	LD	B,0
	LD	C,A
	CALL	COPY

	LD	A,(LINE_DATA)
	DEC	A
	LD	(LINE_DATA),A

	POP	AF
	LD	HL,WIDTH
	CP	(HL)	;80
	JR	Z,DEL.20
DEL.10:
	CALL	CHR_SUB
	RET

DEL.20:
	;del line(80)

;	LD	HL,LINE_DATA
	CALL	COUNT1
	LD	HL,WIDTH
	CP	(HL)	;80
	JR	Z,DEL.10

	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	LD	A,(HL)
	OR	A
	JR	Z,DEL.30

	CALL	CUTS
	JP	PUT

DEL.30:
	;next len = 0

	CALL	DEL_LINE
	CALL	CHR_SUB
	CALL	SETLINE
	JP	PUT

DEL.50:
	;del CR

	LD	A,(CSR_X)
	OR	A
	JR	NZ,DEL.60

	CALL	SETLINE

	LD	HL,(LINE)
	CALL	GET_ADR2
	CALL	DEL_LINE
	JP	PUT

DEL.60:
	CALL	SETLINE

	LD	HL,(LINE)
	PUSH	HL
	LD	A,0FFH
	LD	(EDIT),A
	CALL	CONV2
	CALL	CUTS
	POP	HL
	LD	(LINE),HL
	CALL	PUT
	RET
;
;
;
CHR:
	LD	(CODE),A

	LD	A,0FFH
	LD	(EDIT),A
	CALL	CONV2	; => LINE_DATA

	LD	A,(LINE_DATA2)
	LD	HL,WIDTH
	CP	(HL)	;80
	LD	A,00H
	JR	C,$+3
	DEC	A
	LD	(CNT),A

	LD	A,(MODE)
	OR	A
	JP	NZ,CHR_INS

CHR_NOR:
	LD	A,(CSR_X)
	CALL	GETCHR2
	CP	1AH
	RET	Z
	OR	A
	JP	Z,CHR_NOR.50	;add

	;over-write

	LD	A,(CODE)
	LD	(HL),A

	LD	A,(CNT)
	OR	A
	JP	NZ,CHR_NOR.30	;connecting to next

;	LD	HL,LINE_DATA
	CALL	COUNT1
	LD	HL,WIDTH
	CP	(HL)	;80
	JR	NC,CHR_NOR.10

	CALL	CHR_SUB
	JP	RIGHT

CHR_NOR.10:
	LD	A,(WIDTH)	;80
	CALL	CUT_LINE

	LD	HL,(LINE)
	PUSH	HL
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	CALL	MAKE_LINE
	CALL	SETLINE2
	POP	HL
	LD	(LINE),HL

	CALL	PUT
	JP	RIGHT

CHR_NOR.30:
;	LD	HL,LINE_DATA
	CALL	COUNT1
	LD	HL,WIDTH
	CP	(HL)	;80
	JP	Z,CHR_NOR.35
	JR	NC,CHR_NOR.32

	CALL	CUTS
	CALL	PUT
	JP	RIGHT

CHR_NOR.32:
	CALL	JOINS
	CALL	PUT
	JP	RIGHT

CHR_NOR.35:
	CALL	CHR_SUB
	CALL	SETLINE
	JP	RIGHT
;
;
CHR_NOR.50:
	;add

	LD	A,(CSR_X)
	CALL	GETCHR2

	LD	A,(CODE)
	LD	(HL),A
	INC	HL
	LD	(HL),00H
	LD	A,(LINE_DATA)
	INC	A
	LD	(LINE_DATA),A

;	LD	HL,LINE_DATA
	CALL	COUNT1
	LD	HL,WIDTH
	CP	(HL)	;80
	JP	Z,CHR_NOR.60

	CALL	CHR_SUB
	JP	RIGHT

CHR_NOR.60:

	;add up to 80

	CALL	CHR_SUB
	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	CALL	MAKE_LINE

	XOR	A
	LD	(CSR_X),A
	CALL	PUT
	JP	DOWN

CHR_INS:
	LD	A,(CSR_X)
	CALL	GETCHR2
	OR	A
	JR	Z,CHR_NOR.50

	;insert

	LD	A,(LINE_DATA2)
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	JP	Z,CHR_INS50

	;under 80 =>

	CALL	INS_SUB

;	LD	HL,LINE_DATA
	CALL	COUNT1
	LD	HL,WIDTH
	CP	(HL)	;80
	JP	Z,CHR_INS5
	JR	NC,CHR_INS10

	CALL	CHR_SUB
	JP	RIGHT

CHR_INS5:
	CALL	CHR_SUB
	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	CALL	GET_ADR2
	CALL	MAKE_LINE

	CALL	PUT
	JP	RIGHT

CHR_INS10:
	LD	A,(WIDTH)	;80
	CALL	CUT_LINE
	LD	HL,(LINE)
	PUSH	HL
	INC	HL
	LD	(LINE),HL
	CALL	GET_ADR2
	LD	(LINE_PNT),HL
	CALL	MAKE_LINE
	CALL	SETLINE2
	POP	HL
	LD	(LINE),HL
	CALL	PUT
	JP	RIGHT

;	CALL	JOINS
;	CALL	PUT
;	JP	RIGHT

CHR_INS50:
	;80 <=

	CALL	INS_SUB

	CALL	JOINS
	CALL	PUT
	JP	RIGHT
;
;
;
INS_SUB:
	LD	A,(CSR_X)
	CALL	GETCHR2
	PUSH	HL
	LD	A,(LINE_DATA)
	SUB	E
	INC	A
	LD	B,0
	LD	C,A
	LD	D,H
	LD	E,L
	INC	DE
	CALL	COPY
	POP	HL
	LD	A,(CODE)
	LD	(HL),A
	LD	A,(LINE_DATA)
	INC	A
	LD	(LINE_DATA),A
	RET
;
;
;
CHR_SUB:
	CALL	CONV1	; => DATA2
	LD	DE,(CSR_Y)
	LD	D,0
	CALL	LOCATE
	CALL	PUT1LINE
	RET
;
;
;
BEEP:	LD	A,07H
	CALL	DOS02
	JP	PUT
;
;
;
;===========================
;
;
;
PUT1LINE:
	CALL	CSR_OFF

	LD	HL,(V_ADR)
	LD	A,40H
	CALL	SETV_ADR
	LD	A,(WRVDP)
	LD	C,A
	LD	HL,LINE_DATA2+1
	LD	B,0	;x=0
PUT1LINE2:
	LD	A,(HL)
	OR	A
	JR	Z,PUT1LINE5
	CP	09H
	JR	Z,PUT1LINE3
	CP	1AH
	JR	Z,PUT1LINE4	;
	INC	HL
	INC	B
	OUT	(C),A
	JR	PUT1LINE2
PUT1LINE3:
	OUT	(C),A	;09H
	INC	HL
	INC	B
	LD	A,B
@01:	AND	07H
	LD	A,' '
	JR	NZ,PUT1LINE3
	JR	PUT1LINE2
PUT1LINE4:
	OUT	(C),A	;1AH
	INC	B
	JR	PUT1LINE6
PUT1LINE5:
	LD	A,B
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)	;80
	POP	HL
	JR	Z,PUT1LINE9
	LD	A,0DH
	OUT	(C),A
	INC	B
PUT1LINE6:
	LD	D,B
	DEC	D
	CALL	ERASE
	JR	PUT1LINE9

;	LD	A,B
;	CP	80
;	JR	Z,PUT1LINE9
;	LD	A,' '
;	OUT	(C),A
;	INC	B
;	JR	PUT1LINE6
PUT1LINE9:
	EI
	CALL	CSR_ON
	RET
;
;
;
RIGHT:
	CALL	CHECK_CTRL
	JP	Z,GO_LINE_END

	LD	A,(CSR_X)
	CALL	GETCHR
	OR	A	;end of line
	JP	Z,RIGHT10
	CP	1AH	;end of text
	RET	Z

	CP	09H
	LD	A,(CSR_X)
	JR	NZ,RIGHT2

	LD	B,A
RIGHT1:	INC	B
	LD	A,B
@02:	AND	07H
	JR	NZ,RIGHT1
	LD	A,B
	JR	RIGHT3
RIGHT2:	
	INC	A
RIGHT3:
	LD	HL,WIDTH
	CP	(HL)	;80
	JR	NC,RIGHT10
	LD	(CSR_X),A
	RET
RIGHT10:
	XOR	A
	LD	(CSR_X),A
	JP	DOWN
;
;
;
LEFT:	CALL	CHECK_CTRL
	JP	Z,GO_LINE_TOP

	LD	A,(CSR_X)
	SUB	1
	JP	C,LEFT10
	CALL	GETCHR
	CP	09H
	LD	A,(CSR_X)
	JR	NZ,LEFT4

	LD	C,A
LEFT1:	DEC	C
	PUSH	BC
	LD	A,C
	CALL	GETCHR
	POP	BC
	CP	09H
	JR	NZ,LEFT3
	LD	A,C
@03:	AND	07H
	JR	NZ,LEFT1
LEFT2:	LD	A,C
	JR	LEFT5
LEFT3:	LD	A,C
	INC	A
	JR	$+3
LEFT4:	DEC	A
LEFT5:	LD	(CSR_X),A
	RET

LEFT10:	
	LD	HL,(LINE)
	DEC	HL
	LD	A,H
	OR	L
	RET	Z

	LD	A,(WIDTH)
	CP	40+1
	LD	A,80-1
	JR	NC,$+4
	LD	A,40-1
	LD	(CSR_X),A
	JP	UP
;
;
;

UP2:
	CALL	CHECK_SHFT
	JR	NZ,UP_SHFT
	JR	UP_CTRL

UP:
	LD	A,(RANGE_H)
	LD	B,A
	LD	A,(CSR_Y)
	CP	B
	JR	NZ,UP_10

UP_SHFT:
	LD	HL,(TOP_L)
	DEC	HL
	LD	A,H
	OR	L
	RET	Z

	CALL	SETLINE

	LD	HL,(LINE)
	DEC	HL
	LD	(LINE),HL

	LD	HL,(TOP_L)
	DEC	HL
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	JP	PUT

UP_10:
	DEC	A
	LD	(CSR_Y),A
	CALL	SETLINE
	LD	HL,(LINE)
	DEC	HL
	LD	(LINE),HL
	CALL	SETLDATA
	JP	CHECK_XY

UP_CTRL:
	;ctrl

	CALL	SETLINE

	LD	HL,(TOP_L)
	DEC	HL
	LD	BC,(UP_STEP)
	OR	A
	SBC	HL,BC
	JR	C,UP_CTRL2
	INC	HL

	PUSH	HL
	LD	HL,(LINE)
	OR	A
	SBC	HL,BC
	LD	(LINE),HL
	POP	HL

	PUSH	HL
	CALL	GET_ADR_BACK
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	JP	PUT

UP_CTRL2:
	XOR	A
	LD	(CSR_Y),A
	LD	HL,1
	LD	(LINE),HL
	LD	(TOP_L),HL
	CALL	GET_ADR
	LD	(TOP_PNT),HL
	JP	PUT
;
;
;

DOWN2:
	CALL	CHECK_SHFT
	JP	NZ,DOWN_SHFT
	JP	DOWN_CTRL

DOWN_SHFT:
	LD	HL,(LINE)
	LD	DE,(LINE_NO)
	CALL	DCOMPR
	RET	Z

	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	LD	(LINE),HL

	LD	HL,(TOP_L)
	INC	HL
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	JP	PUT
;
;
DOWN:
	LD	HL,(LINE)
	LD	DE,(LINE_NO)
	CALL	DCOMPR
	RET	Z

	LD	A,(RANGE_L)
	LD	B,A
	LD	A,(CSR_Y)
	CP	B
	JR	NZ,DOWN20

	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	LD	(LINE),HL

	LD	HL,(TOP_L)
	INC	HL
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	JP	PUT

DOWN20:	INC	A
	LD	(CSR_Y),A

	CALL	SETLINE

	LD	HL,(LINE)
	INC	HL
	LD	(LINE),HL

	CALL	SETLDATA
	CALL	CHECK_XY
	RET
;
;
DOWN_CTRL:
	CALL	SETLINE

	LD	HL,(TOP_L)
	LD	BC,(DOWN_STEP)
	ADD	HL,BC
	LD	DE,(LINE_NO)
	INC	DE
	CALL	DCOMPR
	RET	NC

	LD	HL,(LINE)
;	LD	BC,(DOWN_STEP)
	ADD	HL,BC
	CALL	DCOMPR
	JR	C,DOWN_CTRL10
	XOR	A
	LD	(CSR_Y),A
	LD	HL,(TOP_L)
	ADD	HL,BC
DOWN_CTRL10:
	LD	(LINE),HL

	LD	HL,(TOP_L)
	ADD	HL,BC
	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	JP	PUT
;
;
;
PUTDEC:
	LD	A,(WRVDP)
	LD	C,A
	LD	DE,10000
	CALL	PUTDEC_S
	LD	DE,1000
	CALL	PUTDEC_S
	LD	DE,100
	CALL	PUTDEC_S
	LD	DE,10
	CALL	PUTDEC_S
	LD	DE,1
	CALL	PUTDEC_S
	RET

PUTDEC_S:
	LD	B,'0'-1
PUTDEC_S1:
	INC	B
	OR	A
	SBC	HL,DE
	JR	NC,PUTDEC_S1
	ADD	HL,DE
	OUT	(C),B
	RET
;
;
;
PUTFLG:
	PUSH	AF
	CALL	LOCATE_W2
	LD	A,(WRVDP)
	LD	C,A
	POP	AF
	OR	A
	JR	NZ,PUTFLG2
	LD	A,'O'
	OUT	(C),A
	LD	A,'N'
	OUT	(C),A
	LD	A,' '
	OUT	(C),A
	RET
PUTFLG2:
	LD	A,'O'
	OUT	(C),A
	LD	A,'F'
	OUT	(C),A
	LD	A,'F'
	OUT	(C),A
	RET
;
;
;
PUTMES:	
	CALL	LOCATE_W2
	LD	A,(WRVDP)
	LD	C,A
PUTMES1:
	LD	A,(HL)
	OR	A
	RET	Z
	INC	HL
	OUT	(C),A
	JR	PUTMES1
;
;
;
PUTNAME:
	CALL	LOCATE_W2
	LD	A,(WRVDP)
	LD	C,A
	LD	A,(HL)
	OR	A
	JR	NZ,PUTFNAME.10
	PUSH	HL
	PUSH	BC
	LD	C,19H
	CALL	0005H
	INC	A
	POP	BC
	POP	HL
PUTFNAME.10:
	ADD	A,'@'
	OUT	(C),A
	LD	A,':'
	OUT	(C),A
	INC	HL
	LD	B,8
PUTNAME1:
	LD	A,(HL)
	INC	HL
	OUT	(C),A
	DJNZ	PUTNAME1

	LD	A,'.'
	OUT	(C),A

	LD	B,3
PUTNAME2:
	LD	A,(HL)
	INC	HL
	OUT	(C),A
	DJNZ	PUTNAME2
	RET
;
;
;	Window 1  [FILE]
;
;
WINDOW:
	CALL	SETLINE
WD1.0:
	LD	IX,W_DAT1
	CALL	W_OPEN

	LD	DE,10*256+3
	CALL	LOCATE_W2
	LD	HL,(TEXT_MAX)
	LD	DE,(END_TEXT)
	OR	A
	SBC	HL,DE
	LD	DE,100H
	OR	A
	SBC	HL,DE
	CALL	PUTHEX_HL
WD1.1:
	LD	DE,10*256+5
	LD	HL,FILE
	CALL	PUTNAME

	LD	HL,WD1.1
	PUSH	HL

	CALL	W_SEL

	CP	0
	JR	NZ,WD1.5

	LD	IX,W_DAT1_SAVING
	CALL	W_OPEN

	CALL	SAVE

;	RET
	POP	HL
	JR	WD1.9
WD1.5:
	CP	3
	JP	Z,ABORT
	CP	1
	JP	Z,RE_LOAD
	CP	2
	LD	DE,10*256+5
	LD	HL,FILE
	JP	Z,IN_FILE
;	CP	4
;	JP	Z,DIR

	POP	HL
WD1.9:
	CALL	PUT
	RET

RE_LOAD:
	LD	HL,FILE
	LD	DE,FILE_BACK
	LD	BC,12
	LDIR

	LD	DE,10*256+4
	LD	HL,FILE
	CALL	IN_FILE
	RET	C

	LD	IX,W_DAT1_LOADING
	CALL	W_OPEN

;	CALL	LOAD
	LD	C,0FH
	LD	DE,FILE
	CALL	0005H
	OR	A
	JP	NZ,RE_LOAD.10	;DISK_ERR
	CALL	LOAD5

	POP	HL
	JP	INIT20

RE_LOAD.10:
	LD	HL,FILE_BACK
	LD	DE,FILE
	LD	BC,12
	LDIR
	JP	DISK_ERR

FILE_BACK:DS	12

W_DAT1:	DB	2,2		;OFFSET
	DB	30,8		;SIZE
	DB	2,' File',0	;[2] TITLE
	DB	3,3,3		;[3] POS X,Y
	DB	0,'Save',0	;[0] MESSAGE
	DB	0,'Load',0
	DB	0,'Name',0
	DB	0,'End',0
;	DB	0,'Dir',0

	DB	1,2,3		;[1] SELECT POS X,Y
	DB	1,2,4
	DB	1,2,5
	DB	1,2,6
;	DB	1,2,7
	DB	0FFH

W_DAT1_SAVING:
	DB	4,6
	DB	20,5
	DB	2,' Information',0
	DB	3,3,3
	DB	0,' Now Saving ...',0
	DB	0FFH

W_DAT1_LOADING:
	DB	4,6
	DB	20,5
	DB	2,' Information',0
	DB	3,3,3
	DB	0,' Now Loading ...',0
	DB	0FFH

;
;
TAB_CHR:LD	BC,TAB_FLG
	LD	HL,PCG_09
	LD	DE,09H*8+1000H
	JR	CR_CHR2


CR_CHR:	LD	BC,CR_FLG
	LD	HL,PCG_0D
	LD	DE,0DH*8+1000H
CR_CHR2:
	LD	A,(BC)
	CPL
	LD	(BC),A
	OR	A
	JR	Z,$+5
	LD	HL,PCG_00
	LD	B,8
	JP	LDIRVM

;
;
;
AUTO_TAB:
	LD	HL,AUTO_TAB_FLG
	LD	A,(HL)
	CPL
	LD	(HL),A
	RET


;
;
;
IN_FILE:
	PUSH	HL

;	LD	DE,10*256+6
	LD	B,12+2
	CALL	INPUT

	POP	DE
	RET	C

	LD	A,(INPUT_WORK)
	OR	A
	SCF
	RET	Z

	PUSH	DE
	XOR	A
	LD	(DE),A
	INC	DE
	LD	B,11
	LD	A,' '
IN_FILE0:
	LD	(DE),A
	INC	DE
	DJNZ	IN_FILE0
	POP	DE

	PUSH	DE

	LD	HL,INPUT_WORK

	INC	HL
	LD	A,(HL)
	DEC	HL
	CP	':'
	JR	NZ,IN_FILE0.10
	LD	A,(HL)
	SUB	'@'
	LD	(DE),A
	INC	HL
	INC	HL
IN_FILE0.10:

;	LD	DE,FILE+1
	INC	DE
	LD	A,(HL)
	CP	'.'
	JR	NZ,IN_FILE0.30

	PUSH	HL
	PUSH	DE
	PUSH	BC
	DEC	DE
	LD	HL,FILE_BACK
	LD	BC,1+8
	LDIR
	POP	BC
	POP	DE
	POP	HL

	INC	HL
	JR	IN_FILE3

IN_FILE0.30:
	LD	B,8
IN_FILE1:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,IN_FILE6
	CP	'.'
	JR	Z,IN_FILE3
	LD	(DE),A
	INC	DE
	DJNZ	IN_FILE1
IN_FILE2:
	LD	A,(HL)
	OR	A
	JR	Z,IN_FILE6
	CP	'.'
	JR	NZ,$+3
	INC	HL
IN_FILE3:

	POP	DE

	PUSH	HL
	LD	HL,1+8
	ADD	HL,DE
	EX	DE,HL
	POP	HL
;	LD	DE,FILE+1+8
	LD	B,3
IN_FILE4:
	LD	A,(HL)
	INC	HL
	OR	A
	JR	Z,IN_FILE5
	LD	(DE),A
	INC	DE
	DJNZ	IN_FILE4
IN_FILE5:
	RET
IN_FILE6:
	POP	DE
	RET
;
;
;

IN_LINE:
	CALL	SETLINE

	LD	DE,12*256+3
	LD	B,5
	CALL	INPUT
	RET	C
	CALL	GETDEC
	RET	C

IN_LINE.10:
	LD	A,(LOGICAL_LINE_FLG)
	OR	A
	JR	Z,IN_LINE.20
IN_LINE.12:
	LD	A,H
	OR	L
	RET	Z
	LD	DE,(LINE_NO)
	INC	DE
	CALL	DCOMPR
	RET	NC

	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	LD	(LINE),HL

	LD	HL,0000H
	LD	(CSR_Y),HL
	RET

IN_LINE.20:
	LD	A,H
	OR	L
	RET	Z

	PUSH	HL
	LD	HL,1
	CALL	GET_ADR
	POP	DE
	LD	BC,1
IN_LINE.30:
	DEC	DE
	LD	A,D
	OR	E
	JR	Z,IN_LINE.40
IN_LINE.31:
	PUSH	DE
	PUSH	BC
	CALL	COUNT_L
	POP	BC
	POP	DE
	INC	HL
	PUSH	HL
	LD	HL,WIDTH
	CP	(HL)
	POP	HL
	JR	C,IN_LINE.32
	INC	BC
	JR	IN_LINE.31

IN_LINE.32:
	INC	BC
	PUSH	HL
	LD	HL,(LINE_NO)
	OR	A
	SBC	HL,BC
	POP	HL
	JR	NC,IN_LINE.30

	RET

IN_LINE.40:
	LD	H,B
	LD	L,C
	JP	IN_LINE.12

;
;
;
INPUT:
	LD	IX,INPUT_WORK
INPUT_2:
	LD	A,(W_X2)
	ADD	A,D
	LD	D,A
	LD	A,(W_Y2)
	ADD	A,E
	LD	E,A
	CALL	LOCATE

	LD	A,(WRVDP)
	LD	C,A
	LD	A,' '
	PUSH	BC
INPUT1:	OUT	(C),A
	DJNZ	INPUT1
	POP	BC

	CALL	LOCATE

	LD	H,B
	LD	B,0

INPUT20:
	CALL	LOCATE

	LD	A,'_'
	OUT	(C),A

	CALL	CHGET
	LD	(CODE),A

	CP	0DH
	JR	Z,INPUT50

	CP	7FH
	JR	Z,INPUT40
	CP	08H
	JR	Z,INPUT40

	CP	09H
	JR	Z,INPUT30
	CP	20H
	JR	C,INPUT20
INPUT30:
	LD	A,B
	CP	H
	JR	Z,INPUT20

	CALL	LOCATE
	LD	A,(CODE)
	LD	(IX+0),A
	OUT	(C),A
	INC	IX
	INC	D
	INC	B
	JR	INPUT20

INPUT40:
	LD	A,B
	OR	A
	JR	Z,INPUT20

	CALL	LOCATE
	LD	A,' '
	OUT	(C),A
	DEC	D
	DEC	B
	DEC	IX
	JR	INPUT20

INPUT50:
	CALL	LOCATE
	LD	A,' '
	OUT	(C),A

	LD	(IX+0),00H

	LD	A,(INPUT_WORK)
	OR	A
	SCF
	RET	Z

	OR	A
	RET

;
;	Window 2  [BLOCK]
;

WINDOW2:
	CALL	SETLINE

	LD	IX,W_DAT2
	CALL	W_OPEN
WINDOW2.1:
	LD	DE,13*256+3
	CALL	LOCATE_W2
	LD	HL,(BLOCK_TOP)
	CALL	PUTDEC

	LD	DE,13*256+4
	CALL	LOCATE_W2
	LD	HL,(BLOCK_END)
	CALL	PUTDEC

	LD	A,(BLOCK_FLG)
	OR	A
	PUSH	AF
	LD	DE,13*256+5
	CALL	LOCATE_W2
	POP	AF
	JR	NZ,WINDOW2.15
	LD	HL,(BLOCK_BYTE)
	CALL	PUTHEX_HL
	JR	WINDOW2.17
WINDOW2.15:
	LD	B,4
WINDOW2.16:
	LD	A,'-'
	OUT	(C),A
	DJNZ	WINDOW2.16

WINDOW2.17:

	LD	HL,WINDOW2.1
	PUSH	HL

	CALL	W_SEL
	OR	A
	JP	Z,IN_BLOCK_TOP
	CP	1
	JP	Z,IN_BLOCK_END
	CP	2
	JP	Z,BLOCK_COPY
	CP	3
	JP	Z,BLOCK_MOVE
	CP	4
	JP	Z,BLOCK_DEL
	CP	5
	JP	Z,BLOCK_CLEAR
	CP	6
	JP	Z,BLOCK_JUMP

	POP	HL
WINDOW2.9:
	CALL	PUT
	RET

BLOCK_JUMP:
	LD	HL,(BLOCK_TOP)
	CALL	IN_LINE.10
	POP	HL
	CALL	PUT
	RET

IN_BLOCK_TOP:
	LD	HL,(LINE)
	LD	(BLOCK_TOP),HL
	RET

IN_BLOCK_END:
	LD	HL,(LINE)
	LD	(BLOCK_END),HL
	RET

BLOCK_CLEAR:
	LD	A,0FFH
	LD	(BLOCK_FLG),A
	LD	HL,(WORK_MAX)
	LD	(TEXT_MAX),HL
	RET

BLOCK_DEL:
	LD	HL,(BLOCK_BYTE);bug fix
	PUSH	HL
	LD	HL,(BLOCK_LINE)
	PUSH	HL

	CALL	BLOCK_CHECK

	LD	HL,(END_TEXT)
	LD	BC,(BLOCK_END_PNT)
	OR	A
	SBC	HL,BC
	LD	B,H
	LD	C,L
	LD	HL,(BLOCK_END_PNT)
	LD	DE,(BLOCK_TOP_PNT)
	CALL	COPY

	LD	HL,(END_TEXT)
	LD	BC,(BLOCK_BYTE)
	OR	A
	SBC	HL,BC
	LD	(END_TEXT),HL

	LD	HL,(LINE_NO)
	LD	BC,(BLOCK_LINE)
	OR	A
	SBC	HL,BC
	LD	(LINE_NO),HL

	LD	HL,(BLOCK_TOP)	;1
	LD	(LINE),HL
	LD	(TOP_L),HL

	CALL	GET_ADR
	LD	(TOP_PNT),HL

	LD	HL,0000
	LD	(CSR_Y),HL

	POP	HL
	LD	(BLOCK_LINE),HL;bug fix
	POP	HL
	LD	(BLOCK_BYTE),HL

	POP	HL
	CALL	PUT
	RET

BLOCK_COPY:
	CALL	SETLINE

	LD	A,0FFH
	LD	(BLOCK_FLG),A

	CALL	BLOCK_CHECK

	LD	HL,(WORK_MAX)
	LD	BC,(BLOCK_BYTE)
	OR	A
	SBC	HL,BC
	LD	DE,(END_TEXT)
	INC	D
	CALL	DCOMPR
	JR	C,ERR_MEM
	LD	(TEXT_MAX),HL

	EX	DE,HL
	LD	HL,(BLOCK_TOP_PNT)
	LD	BC,(BLOCK_BYTE)
	LDIR

	LD	A,00H
	LD	(BLOCK_FLG),A
	RET

BLOCK_MOVE:
	LD	A,(BLOCK_FLG)
	OR	A
	JP	NZ,ERR_BLOCK

	LD	HL,(END_TEXT)
	INC	H
	LD	BC,(BLOCK_BYTE)
	ADD	HL,BC
	JR	C,ERR_MEM
	LD	DE,(TEXT_MAX)
	CALL	DCOMPR
	JR	NC,ERR_MEM

	LD	HL,(LINE_PNT)
	PUSH	HL
	LD	BC,(BLOCK_BYTE)
	ADD	HL,BC
	EX	DE,HL
	LD	HL,(END_TEXT)
	LD	BC,(LINE_PNT)
	OR	A
	SBC	HL,BC
	LD	B,H
	LD	C,L
	POP	HL
	CALL	COPY

	LD	HL,(TEXT_MAX)
	LD	DE,(LINE_PNT)
	LD	BC,(BLOCK_BYTE)
	LDIR

	LD	HL,(END_TEXT)
	LD	BC,(BLOCK_BYTE)
	ADD	HL,BC
	LD	(END_TEXT),HL

	LD	HL,(LINE_NO)
	LD	DE,(BLOCK_LINE)
	ADD	HL,DE
	LD	(LINE_NO),HL

	POP	HL
	CALL	PUT
	RET

ERR_MEM:
	LD	DE,ERR_MEM_MES
	JP	ERROR

ERR_MEM_MES:
	DB	0,"Memory isn't enough",0
	DB	0FFH

ERR_BLOCK:
	LD	DE,ERR_BLOCK_MES
	JP	ERROR

ERR_BLOCK_MES:
	DB	0,'Parameter error',0
	DB	0FFH

BLOCK_CHECK:
	LD	HL,(BLOCK_TOP)
	LD	A,H
	OR	L
	JP	Z,ERR_BLOCK

	LD	HL,(BLOCK_TOP)
	LD	DE,(BLOCK_END)
	OR	A
	SBC	HL,DE
	JP	NC,ERR_BLOCK
	LD	HL,(BLOCK_END)
	LD	DE,(BLOCK_TOP)
	OR	A
	SBC	HL,DE
	LD	(BLOCK_LINE),HL
	LD	HL,(LINE_NO)
	CALL	DCOMPR
	JP	Z,ERR_BLOCK

	LD	HL,(BLOCK_TOP)
	CALL	GET_ADR2
	LD	(BLOCK_TOP_PNT),HL
	PUSH	HL
	LD	HL,(BLOCK_END)
	CALL	GET_ADR2
	LD	(BLOCK_END_PNT),HL
	EX	DE,HL
	POP	HL

	EX	DE,HL
	OR	A
	SBC	HL,DE
	LD	(BLOCK_BYTE),HL
	RET

;
;
W_DAT2:
	DB	2,0
	DB	30,11

	DB	2,' Block',0
	DB	3,3,3

	DB	0,'Block Top',0
	DB	0,'Block End',0
	DB	0,'Copy',0
	DB	0,'Move',0
	DB	0,'Delete',0
	DB	0,'Clear',0
	DB	0,'Jump',0

	DB	1,2,3
	DB	1,2,4
	DB	1,2,5
	DB	1,2,6
	DB	1,2,7
	DB	1,2,8
	DB	1,2,9
	DB	0FFH

;
;	Window 4  [SEARCH]
;

WINDOW4:
	CALL	SETLINE

	LD	IX,W_DAT4
	CALL	W_OPEN
WINDOW4.1:
	LD	DE,10*256+3
	LD	HL,SEARCH_WORD
	CALL	PUTMES

	LD	DE,13*256+4
	CALL	LOCATE_W2
	LD	HL,KEY_MACRO_WORK
	LD	B,(HL)
	INC	B
	DEC	B
	JR	Z,WINDOW4.3
	INC	HL
	LD	A,(WRVDP)
	LD	C,A
WINDOW4.2:
	LD	A,(HL)
	INC	HL
	INC	HL
	OUT	(C),A
	DJNZ	WINDOW4.2
WINDOW4.3:
	LD	HL,WINDOW4.1
	PUSH	HL

	CALL	W_SEL

	CP	0
	JP	Z,SET_SEARCH_WORD
	CP	1
	JP	Z,SET_KEY_MACRO

	POP	HL
	CALL	PUT
	RET
;
;
;
SET_SEARCH_WORD:
	LD	DE,10*256+3
;	LD	IX,SEARCH_WORD
	LD	B,20
	CALL	INPUT	;_2
	RET	C

	LD	HL,INPUT_WORK
	LD	DE,SEARCH_WORD
	LD	B,0
SET_SEARCH_WORD1:
	LD	A,(HL)
	LD	(DE),A
	OR	A
	JR	Z,SET_SEARCH_WORD2
	INC	HL
	INC	DE
	INC	B
	JR	SET_SEARCH_WORD1
SET_SEARCH_WORD2:
	LD	A,B
	LD	(SEARCH_LEN),A

	POP	HL
	CALL	PUT
	RET

;
;
;

SET_KEY_MACRO:
	LD	HL,KEY_MACRO_WORK
	LD	(HL),0
	INC	HL
SET_KEY_MACRO.10:
	CALL	CHGET
	CP	1BH
	JR	Z,SET_KEY_MACRO.20
	PUSH	HL
	PUSH	AF
	LD	A,6
	LD	IX,0141H
	CALL	BIOS
	AND	03H
	POP	BC
	POP	HL
	LD	(HL),B
	INC	HL
	LD	(HL),A
	INC	HL
	LD	A,(KEY_MACRO_WORK)
	INC	A
	LD	(KEY_MACRO_WORK),A

	PUSH	HL
	LD	DE,13*256+4
	CALL	LOCATE_W2
	LD	HL,KEY_MACRO_WORK
	LD	B,(HL)
	INC	HL
	LD	A,(WRVDP)
	LD	C,A
SET_KEY_MACRO.12:
	LD	A,(HL)
	INC	HL
	INC	HL
	OUT	(C),A
	DJNZ	SET_KEY_MACRO.12
	POP	HL
	JR	SET_KEY_MACRO.10
SET_KEY_MACRO.20:
	RET

W_DAT4:	DB	2,4
	DB	38,6
	DB	2,' Window-3',0

	DB	3,3,3
	DB	0,'Search ',0
	DB	0,'Key Macro ',0

	DB	1,2,3
	DB	1,2,4
	DB	0FFH

;
;	Window 5  [SETTING]
;

WINDOW5:
	CALL	SETLINE
	LD	IX,W_DAT5
	CALL	W_OPEN
WINDOW5.1:
	LD	DE,12*256+3
	CALL	LOCATE_W2
	LD	HL,(LINE)
	CALL	PUTDEC
	LD	A,'/'
	OUT	(C),A
	LD	DE,18*256+3
	CALL	LOCATE_W2
	LD	HL,(LINE_NO)
	CALL	PUTDEC

	LD	DE,12*256+4
	LD	A,(TAB_FLG)
	CALL	PUTFLG

	LD	DE,12*256+5
	LD	A,(CR_FLG)
	CALL	PUTFLG

	LD	DE,12*256+6
	LD	A,(AUTO_TAB_FLG)
	CALL	PUTFLG

	LD	DE,12*256+8
	LD	A,(LOGICAL_LINE_FLG)
	CALL	PUTFLG

	CALL	W_SEL

	LD	HL,WINDOW5.1
	PUSH	HL

	OR	A
	JR	NZ,WINDOW5.2
	CALL	IN_LINE
	POP	HL
	JR	WINDOW5.END
WINDOW5.2:
	CP	1
	JP	Z,TAB_CHR
	CP	2
	JP	Z,CR_CHR
	CP	3
	JP	Z,AUTO_TAB
	CP	4
	JP	Z,SET_COLOR
	CP	5
	JP	Z,SET_LOG_FLG
	POP	HL
WINDOW5.END:
	CALL	PUT
	RET


SET_COLOR:
	LD	A,(0F3E9H)
	PUSH	AF
	LD	A,(0F3EAH)
	PUSH	AF
	LD	A,(0F3EBH)
	PUSH	AF

	XOR	A
	LD	(0F3E9H),A
	LD	(0F3EAH),A
	LD	(0F3EBH),A
	LD	IX,0062H
	CALL	BIOS

	LD	C,07H
	CALL	0005H

	POP	AF
	LD	(0F3EBH),A
	POP	AF
	LD	(0F3EAH),A
	POP	AF
	LD	(0F3E9H),A
	LD	IX,0062H
	CALL	BIOS
	RET

SET_LOG_FLG:
	LD	HL,LOGICAL_LINE_FLG
	LD	A,(HL)
	CPL
	LD	(HL),A
	RET

W_DAT5:
	DB	2,2
	DB	26,10
	DB	2,' Setting',0

	DB	3,3,3
	DB	0,'Line',0
	DB	0,'TAB',0
	DB	0,'CR',0
	DB	0,'Auto TAB',0
	DB	0,'Color',0
	DB	0,'Logical',0

	DB	1,2,3
	DB	1,2,4
	DB	1,2,5
	DB	1,2,6
	DB	1,2,7
	DB	1,2,8
	DB	0FFH

;
;	Window 6  [MARK]
;

WINDOW6:
	CALL	SETLINE
	LD	IX,W_DAT6
	CALL	W_OPEN
WINDOW6.1:
	LD	DE,12*256+3
	CALL	LOCATE_W2
	LD	HL,(LINE)
	CALL	PUTDEC
	LD	A,'/'
	OUT	(C),A
	LD	DE,18*256+3
	CALL	LOCATE_W2
	LD	HL,(LINE_NO)
	CALL	PUTDEC

	LD	HL,MARK_WORK
	LD	DE,12*256+4
	LD	B,4
WINDOW6.5:
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	LOCATE_W2
	POP	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	PUSH	HL
	EX	DE,HL
	CALL	PUTDEC
	POP	HL
	POP	DE
	INC	E
	POP	BC
	DJNZ	WINDOW6.5

	CALL	W_SEL

	LD	HL,WINDOW6.1
	PUSH	HL

	CP	4
	JR	NC,WINDOW6.RET

	ADD	A,A
	LD	H,0
	LD	L,A
	LD	DE,MARK_WORK
	ADD	HL,DE
	LD	DE,(LINE)
	LD	(HL),E
	INC	HL
	LD	(HL),D
	RET

WINDOW6.RET:
	POP	HL
	CALL	PUT
	RET


W_DAT6:
	DB	2,2
	DB	26,10
	DB	2,' Mark',0

	DB	3,3,4
	DB	0,'Mark1',0
	DB	0,'Mark2',0
	DB	0,'Mark3',0
	DB	0,'Mark4',0

	DB	1,2,4
	DB	1,2,5
	DB	1,2,6
	DB	1,2,7
	DB	0FFH

MARK_WORK:
	DS	2*10

;
;	Window 7  [JUMP]
;

WINDOW7:
	CALL	SETLINE
	LD	IX,W_DAT7
	CALL	W_OPEN
WINDOW7.1:
	LD	DE,12*256+3
	CALL	LOCATE_W2
	LD	HL,(LINE)
	CALL	PUTDEC
	LD	A,'/'
	OUT	(C),A
	LD	DE,18*256+3
	CALL	LOCATE_W2
	LD	HL,(LINE_NO)
	CALL	PUTDEC

	LD	HL,MARK_WORK
	LD	DE,12*256+4
	LD	B,4
WINDOW7.5:
	PUSH	BC
	PUSH	DE
	PUSH	HL
	CALL	LOCATE_W2
	POP	HL
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	INC	HL
	PUSH	HL
	EX	DE,HL
	CALL	PUTDEC
	POP	HL
	POP	DE
	INC	E
	POP	BC
	DJNZ	WINDOW7.5

	CALL	W_SEL

	LD	HL,WINDOW7.1
	PUSH	HL

	CP	4
	JR	NC,WINDOW7.RET

	ADD	A,A
	LD	H,0
	LD	L,A
	LD	DE,MARK_WORK
	ADD	HL,DE
	LD	E,(HL)
	INC	HL
	LD	D,(HL)
	EX	DE,HL

	LD	A,H
	OR	L
	RET	Z
	LD	DE,(LINE_NO)
	INC	DE
	CALL	DCOMPR
	RET	NC

	PUSH	HL
	CALL	GET_ADR2
	LD	(TOP_PNT),HL
	POP	HL
	LD	(TOP_L),HL
	LD	(LINE),HL

	LD	HL,0000H
	LD	(CSR_Y),HL
	CALL	PUT
	POP	AF	;dummy
	RET

WINDOW7.RET:
	POP	HL
	CALL	PUT
	RET


W_DAT7:	DB	2,2
	DB	26,10
	DB	2,' Jump',0

	DB	3,3,4
	DB	0,'Mark1',0
	DB	0,'Mark2',0
	DB	0,'Mark3',0
	DB	0,'Mark4',0

	DB	1,2,4
	DB	1,2,5
	DB	1,2,6
	DB	1,2,7
	DB	0FFH

;
;	Window 8  [DUMP]
;

WINDOW8:
	CALL	SETLINE
	LD	IX,W_DAT8
	CALL	W_OPEN

WINDOW8.1:
	LD	DE,12*256+3
	CALL	LOCATE_W2
	LD	HL,(W8_ADDRESS)
	CALL	PUTHEX_HL

	LD	DE,12*256+5
	LD	HL,W8_FILE
	CALL	PUTNAME

	LD	DE,12*256+6
	CALL	LOCATE_W2
	LD	HL,(W8_OFFSET)
	CALL	PUTHEX_HL

	CALL	W_SEL

	LD	HL,WINDOW8.1
	PUSH	HL
	OR	A
	JR	NZ,WINDOW8.10

	LD	DE,12*256+3
	LD	B,4
	CALL	INPUT
	RET	C
	CALL	GETHEX
	RET	C

	LD	(W8_ADDRESS),HL
	RET

WINDOW8.10:
	DEC	A
	JR	NZ,WINDOW8.20

	LD	C,1AH
	LD	DE,USRDMA
	CALL	0005H

	LD	C,0FH
	LD	DE,W8_FILE
	CALL	0005H

	LD	HL,(W8_ADDRESS)
	LD	DE,(W8_OFFSET)
	OR	A
	SBC	HL,DE
	LD	(W8_FILE+33),HL
	LD	HL,0000H
	LD	(W8_FILE+35),HL
	INC	L
	LD	(W8_FILE+14),HL

	LD	C,27H
	LD	DE,W8_FILE
	LD	HL,100H
	CALL	0005H

	LD	HL,USRDMA

	LD	DE,1*256+1
	LD	B,8
WINDOW8.11:
	PUSH	BC
	PUSH	DE

	PUSH	HL
	CALL	LOCATE_W2
	POP	HL

	PUSH	HL
	LD	DE,USRDMA
	OR	A
	SBC	HL,DE
	LD	DE,(W8_ADDRESS)
	ADD	HL,DE
	CALL	PUTHEX_HL
	LD	A,' '
	OUT	(C),A
	POP	HL

	PUSH	HL

	LD	B,8
WINDOW8.12:
	PUSH	BC

	LD	A,(HL)
	CALL	PUTHEX
	LD	A,' '
	OUT	(C),A
	INC	HL

	POP	BC
	DJNZ	WINDOW8.12

	POP	HL

	LD	B,8
WINDOW8.13:
	PUSH	BC

	LD	A,(HL)
	OUT	(C),A
	INC	HL

	POP	BC
	DJNZ	WINDOW8.13

	POP	DE
	POP	BC
	INC	E
	DJNZ	WINDOW8.11

	LD	C,10H
	LD	DE,W8_FILE
	CALL	0005H

	POP	HL
	RET

WINDOW8.20:
	DEC	A
	JR	NZ,WINDOW8.30

	LD	DE,12*256+5
	LD	HL,W8_FILE
	CALL	IN_FILE
	RET

WINDOW8.30:
	DEC	A
	JP	NZ,WINDOW8.40

	LD	DE,12*256+6
	LD	B,4
	CALL	INPUT
	RET	C
	CALL	GETHEX
	RET	C

	LD	(W8_OFFSET),HL
	RET

WINDOW8.40:
	POP	HL
	CALL	PUT
	RET


W_DAT8:	DB	0,0
	DB	40,12
	DB	2,' Dump',0

	DB	3,3,3
	DB	0,'Address',0
	DB	0,'Dump',0
	DB	0,'Name',0
	DB	0,'Base',0

	DB	1,2,3
	DB	1,2,4
	DB	1,2,5
	DB	1,2,6
	DB	0FFH

W8_ADDRESS:DS	2
W8_FILE:DS	25H
W8_OFFSET:DW	0100H

;
;
;

GETDEC:	LD	IX,INPUT_WORK
	LD	HL,0000H
	LD	A,(IX+0)
	OR	A
	SCF
	RET	Z
GETDEC2:
	LD	A,(IX+0)
	OR	A
	RET	Z
	INC	IX
	ADD	HL,HL
	LD	D,H
	LD	E,L
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,DE
	SUB	'0'
	RET	C
	CP	10
	CCF
	RET	C
	LD	D,0
	LD	E,A
	ADD	HL,DE
	JR	GETDEC2

;
;
;

GETHEX:	LD	IX,INPUT_WORK
	LD	HL,0000H
	LD	A,(IX+0)
	OR	A
	SCF
	RET	Z
GETHEX2:
	LD	A,(IX+0)
	OR	A
	RET	Z
	CP	'a'
	JR	C,GETHEX2.10
	CP	'z'+1
	JR	NC,GETHEX2.10
	SUB	20H
GETHEX2.10:
	INC	IX
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,HL
	SUB	'0'
	RET	C
	CP	10
	JR	C,GETHEX3
	CP	'A'-'0'
	RET	C
	CP	'F'+1-'0'
	CCF
	RET	C
	SUB	7
GETHEX3:
	OR	L
	LD	L,A
	JR	GETHEX2


;
;
;

PUTHEX_HL:
	LD	A,H
	CALL	PUTHEX
	LD	A,L
	JP	PUTHEX
;
;
;
PUTHEX:
	LD	BC,(WRVDP)
	PUSH	AF
	RRCA
	RRCA
	RRCA
	RRCA
	CALL	PUTHEX2
	POP	AF
PUTHEX2:AND	0FH
	CP	10
	JR	C,$+4
	ADD	A,7
	ADD	A,'0'
	OUT	(C),A
	RET

CHGET:	PUSH	IX
	PUSH	IY
	PUSH	HL
	PUSH	DE
	PUSH	BC
	LD	C,07H
	CALL	0005H
	POP	BC
	POP	DE
	POP	HL
	POP	IY
	POP	IX
	RET

#INCLUDE <SCE02.ASM>

